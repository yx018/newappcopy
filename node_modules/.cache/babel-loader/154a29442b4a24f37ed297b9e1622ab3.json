{"ast":null,"code":"var _jsxFileName = \"/Users/yangxu/newapp/src/MyComponent.js\",\n    _s = $RefreshSig$();\n\nimport { OpenCvProvider, useOpenCv } from 'opencv-react';\nimport { useEffect, useState } from 'react';\nimport './MyComponent.css';\nimport Utils from './Utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction MyComponent() {\n  _s();\n\n  const {\n    loaded,\n    cv\n  } = useOpenCv();\n  const [videoLoaded, setVideoLoaded] = useState(false);\n  let utils;\n  let classifier;\n  let faceCascadeFile = \"haarcascade_frontalface_default.xml\";\n  useEffect(() => {\n    console.log(loaded, cv);\n\n    if (loaded) {\n      console.log('component cv loaded');\n\n      if (videoLoaded) {\n        console.log('video loaded');\n        utils = new Utils(cv);\n        classifier = new cv.CascadeClassifier();\n        utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {});\n        classifier.load(faceCascadeFile);\n        console.log('classifier:', classifier);\n        setTimeout(function () {\n          openCvReady(classifier);\n        }, 5000); // utils.loadOpenCv(openCvReady);\n      }\n    }\n  }, [loaded, videoLoaded]);\n  const add_button = document.getElementById(\"add\");\n  const zoom_window_text = document.getElementById(\"zoom_window_text\");\n  const process_window_text = document.getElementById(\"process_window_text\");\n  const video = document.getElementById(\"cam_input\");\n  const output = document.getElementById(\"canvas_output\");\n  const [count, setCount] = useState(0);\n\n  const catchZoomWindow = () => {\n    navigator.mediaDevices.getDisplayMedia({\n      video: true,\n      audio: false\n    }).then(function (stream) {\n      // let video = document.getElementById(\"cam_input\");\n      // console.log(video);\n      // console.log(stream);\n      video.srcObject = stream;\n      console.log(stream);\n      let settings = stream.getVideoTracks()[0].getSettings();\n      console.log(settings);\n      add_button.style.display = \"none\";\n      zoom_window_text.style.display = \"none\";\n      process_window_text.style.display = \"none\"; // FPS = settings.frameRate;\n\n      output.style.width = video.style.width;\n      output.style.height = video.style.height;\n      video.play();\n    }).then(() => {\n      console.log('component catch', cv); // console.log(OpenCvProvider.onLoaded);\n    }).then(() => {\n      // openCvReady();\n      // utils.loadOpenCv(openCvReady);\n      setVideoLoaded(true);\n    }).catch(err => {\n      console.log(\"An error occurred! \" + err);\n    });\n  };\n\n  function openCvReady(classifier) {\n    // const { loaded, cv } = useOpenCv();\n    console.log('opencvReady', cv.Mat, loaded);\n    let FPS = 0.25; // let video = document.getElementById(\"cam_input\");\n\n    let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n    let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n    let gray = new cv.Mat();\n    let cap = new cv.VideoCapture(video);\n    let faces = new cv.RectVector(); // let classifier = new cv.CascadeClassifier();\n\n    let minsize = new cv.Size(0, 0);\n    let maxsize = new cv.Size(1000, 1000); // let faceCascadeFile = \"haarcascade_frontalface_default.xml\";\n\n    console.log('here'); // utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n    //     console.log('here2');\n    //     classifier.load(faceCascadeFile) // in the callback, load the cascade from file\n    //     .then(()=>{\n    //         console.log('AAA'); \n    //         processVideo();\n    //     })\n    //     .catch((err)=>{console.log('load classifier:', err)});\n    // });\n\n    let clip_width = video.width / 5;\n    let clip_height = video.height / 5; // let face_row = -1;\n    // let face_col = -1;\n    // while(true){\n    //     let begin = Date.now();\n    //     cap.read(src);\n    //     src.copyTo(dst);\n    //     cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\n    //     console.log('process classifier:', classifier);\n    //     // console.log(classifier.load);\n    //     // console.log(gray);\n    //     // console.log(faces);\n    //     try{\n    //         classifier.detectMultiScale(gray, faces, 1.1, 3);\n    //     }catch(err){\n    //         console.log(err);\n    //     }\n    // }\n\n    function processVideo() {\n      let begin = Date.now();\n\n      if (video.srcObject != null) {\n        cap.read(src);\n        src.copyTo(dst);\n        cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\n        console.log('process classifier:', classifier); // console.log(classifier.load);\n        // console.log(gray);\n        // console.log(faces);\n\n        try {\n          classifier.detectMultiScale(gray, faces, 1.1, 3);\n        } catch (err) {\n          console.log(err);\n        } // for (let i = 0; i < faces.size(); ++i) {\n        //     let face = faces.get(i);\n        //     // console.log(face);\n        //     let face_row = parseInt(face.y/clip_height);\n        //     let face_col = parseInt(face.x/clip_width);\n        //     let tmp_row = parseInt((face.y+face.height-5) / clip_height);\n        //     let tmp_col = parseInt((face.x+face.width-5) / clip_width);\n        //     // console.log([face_row, face_col, tmp_row, tmp_col]);\n        //     if (face.width>=clip_width || face.height>=clip_height || tmp_row!=face_row || tmp_col!=face_col)\n        //         continue;\n        //     let point1 = new cv.Point(face.x, face.y);\n        //     let point2 = new cv.Point(face.x + face.width, face.y + face.height);\n        //     cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);\n        // }\n\n\n        cv.imshow(\"canvas_output\", gray);\n      } // schedule next one.\n\n\n      let delay = 1000 / FPS - (Date.now() - begin);\n      setTimeout(processVideo, delay);\n    } // schedule first one.\n\n\n    setTimeout(processVideo, 0);\n  } // const cv = useOpenCv()\n  // console.log(cv)\n  // const video = document.getElementById(\"video\");\n  // let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n  // let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n  // let gray = new cv.Mat();\n  // let cap = new cv.VideoCapture(video);\n  // let faces = new cv.RectVector();\n  // let classifier = new cv.CascadeClassifier();\n  // let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\n  // classifier.load(faceCascadeFile);\n  // console.log(classifier);\n  // function onOpenUtilsReady() {\n  //     let utils = new Utils('errorMessage');\n  //     utils.loadOpenCv(() => {\n  //     let faceCascadeFile = 'haarcascade_frontalface_default.xml';\n  //         utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n  //             document.getElementById('status').innerHTML = 'OpenCV.js is ready.';\n  //         });\n  //     });\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        id: \"title\",\n        children: \"iExam\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n        id: \"tip\",\n        children: \"Please click add button to import the Zoom stream. Then you can scroll down to the iExam window.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"zoom_window_text\",\n        children: \"Zoom window\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        id: \"cam_input\",\n        width: \"1200\",\n        height: \"690\",\n        autoPlay: true,\n        muted: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        id: \"add\",\n        onClick: catchZoomWindow,\n        width: \"120\",\n        height: \"120\",\n        viewBox: \"0 0 24 24\",\n        children: /*#__PURE__*/_jsxDEV(\"path\", {\n          d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 133\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"process_window_text\",\n        children: \"iExam window\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"canvas_output\",\n        width: \"1200\",\n        height: \"690\",\n        children: \"This box is for capturing student face\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"footer\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Details for iExam please refer to slides: \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://daoyuan14.github.io/slides/Expo21_iExam.pdf\",\n          target: \"_blank\",\n          children: \"https://daoyuan14.github.io/slides/Expo21_iExam.pdf\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 58\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Post-exam recording analysis for desktop version, please view: \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://github.com/VPRLab/iExam/tree/test\",\n          target: \"_blank\",\n          children: \"https://github.com/VPRLab/iExam/tree/test \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 79\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n} // function Utils() {\n//     let self = this;\n//     this.createFileFromUrl = function(path, url, callback) {\n//         console.log(cv);\n//         let request = new XMLHttpRequest();\n//         request.open('GET', url, true);\n//         request.responseType = 'arraybuffer';\n//         request.onload = function(ev) {\n//             if (request.readyState === 4) {\n//                 if (request.status === 200) {\n//                     let data = new Uint8Array(request.response);\n//                     cv.FS_createDataFile('/', path, data, true, false, false);\n//                     callback();\n//                 } else {\n//                     self.printError('Failed to load ' + url + ' status: ' + request.status);\n//                 }\n//             }\n//         };\n//         request.send();\n//     };\n//     const OPENCV_URL = './opencv/opencv.js';\n//     this.loadOpenCv = function(onloadCallback) {\n//         let script = document.createElement('script');\n//         script.setAttribute('async', '');\n//         script.setAttribute('type', 'text/javascript');\n//         script.addEventListener('load', async () => {\n//             if (cv.getBuildInformation)\n//             {\n//                 console.log(cv.getBuildInformation());\n//                 onloadCallback();\n//             }\n//             else\n//             {\n//                 // WASM\n//                 if (cv instanceof Promise) {\n//                     cv = await cv;\n//                     console.log(cv.getBuildInformation());\n//                     onloadCallback();\n//                 } else {\n//                     cv['onRuntimeInitialized']=()=>{  //satisfy this condition\n//                         console.log(cv.getBuildInformation()); \n//                         onloadCallback();\n//                     }\n//                 }\n//             }\n//         });\n//         script.addEventListener('error', () => {\n//             self.printError('Failed to load ' + OPENCV_URL);\n//         });\n//         script.src = OPENCV_URL;\n//         let node = document.getElementsByTagName('script')[0];\n//         node.parentNode.insertBefore(script, node);\n//     };\n// }\n\n\n_s(MyComponent, \"Ffhko8uiclNTTPzrh0MAyOqDUrY=\", false, function () {\n  return [useOpenCv];\n});\n\n_c = MyComponent;\nexport default MyComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyComponent\");","map":{"version":3,"sources":["/Users/yangxu/newapp/src/MyComponent.js"],"names":["OpenCvProvider","useOpenCv","useEffect","useState","Utils","MyComponent","loaded","cv","videoLoaded","setVideoLoaded","utils","classifier","faceCascadeFile","console","log","CascadeClassifier","createFileFromUrl","load","setTimeout","openCvReady","add_button","document","getElementById","zoom_window_text","process_window_text","video","output","count","setCount","catchZoomWindow","navigator","mediaDevices","getDisplayMedia","audio","then","stream","srcObject","settings","getVideoTracks","getSettings","style","display","width","height","play","catch","err","Mat","FPS","src","CV_8UC4","dst","CV_8UC1","gray","cap","VideoCapture","faces","RectVector","minsize","Size","maxsize","clip_width","clip_height","processVideo","begin","Date","now","read","copyTo","cvtColor","COLOR_RGBA2GRAY","detectMultiScale","imshow","delay"],"mappings":"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","sourcesContent":["import { OpenCvProvider, useOpenCv } from 'opencv-react'\nimport {useEffect, useState} from 'react'\nimport './MyComponent.css';\nimport Utils from './Utils';\n\nfunction MyComponent() {\n\n    const { loaded, cv } = useOpenCv();\n    const [videoLoaded, setVideoLoaded] = useState(false);\n\n    let utils;\n    let classifier;\n    let faceCascadeFile = \"haarcascade_frontalface_default.xml\";\n\n    useEffect(() => {\n        console.log(loaded, cv);\n        if (loaded) {\n            console.log('component cv loaded');\n            if(videoLoaded){\n                console.log('video loaded');\n                utils = new Utils(cv);\n                classifier = new cv.CascadeClassifier();\n                utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, ()=>{\n                    \n                });\n                classifier.load(faceCascadeFile);\n\n                console.log('classifier:', classifier);\n                setTimeout(function() {\n                    openCvReady(classifier);\n                  }, 5000);\n                \n                // utils.loadOpenCv(openCvReady);\n\n                \n            }\n        }\n    }, [loaded, videoLoaded])\n\n    const add_button = document.getElementById(\"add\");\n    const zoom_window_text = document.getElementById(\"zoom_window_text\");\n    const process_window_text = document.getElementById(\"process_window_text\");\n    const video = document.getElementById(\"cam_input\");\n    const output = document.getElementById(\"canvas_output\");\n    \n    \n    \n\n    const [count, setCount] = useState(0);\n\n    const catchZoomWindow = () => {\n        navigator.mediaDevices.getDisplayMedia({ video: true, audio: false })\n        .then(function(stream) {\n            // let video = document.getElementById(\"cam_input\");\n            // console.log(video);\n            // console.log(stream);\n            video.srcObject = stream;\n            console.log(stream);\n            let settings = stream.getVideoTracks()[0].getSettings();\n            console.log(settings);\n            add_button.style.display = \"none\";\n            zoom_window_text.style.display = \"none\";\n            process_window_text.style.display = \"none\";\n            // FPS = settings.frameRate;\n            output.style.width = video.style.width;\n            output.style.height = video.style.height;\n            video.play();\n        })\n        .then(()=>{\n            console.log('component catch', cv);\n            // console.log(OpenCvProvider.onLoaded);\n\n        })\n        .then(()=> {\n            // openCvReady();\n            // utils.loadOpenCv(openCvReady);\n            setVideoLoaded(true);\n            \n        })\n        .catch((err) =>{\n            console.log(\"An error occurred! \" + err);\n        });\n\n    }\n\n    function openCvReady(classifier) {\n        // const { loaded, cv } = useOpenCv();\n        \n        console.log('opencvReady', cv.Mat, loaded);\n    \n        let FPS = 0.25;\n        // let video = document.getElementById(\"cam_input\");\n        let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n        let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n        let gray = new cv.Mat();\n        let cap = new cv.VideoCapture(video);\n        let faces = new cv.RectVector();\n        // let classifier = new cv.CascadeClassifier();\n        let minsize = new cv.Size(0, 0);\n        let maxsize = new cv.Size(1000, 1000);\n        // let faceCascadeFile = \"haarcascade_frontalface_default.xml\";\n        \n        console.log('here');\n\n        \n\n        // utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n        //     console.log('here2');\n        //     classifier.load(faceCascadeFile) // in the callback, load the cascade from file\n        //     .then(()=>{\n        //         console.log('AAA'); \n        //         processVideo();\n        //     })\n        //     .catch((err)=>{console.log('load classifier:', err)});\n            \n        // });\n\n    \n        let clip_width = video.width/5;\n        let clip_height = video.height/5;\n        \n    \n        // let face_row = -1;\n        // let face_col = -1;\n    \n        // while(true){\n        //     let begin = Date.now();\n            \n        //     cap.read(src);\n        //     src.copyTo(dst);\n        //     cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\n        //     console.log('process classifier:', classifier);\n        //     // console.log(classifier.load);\n        //     // console.log(gray);\n        //     // console.log(faces);\n            \n\n        //     try{\n        //         classifier.detectMultiScale(gray, faces, 1.1, 3);\n\n        //     }catch(err){\n        //         console.log(err);\n        //     }\n    \n        // }\n        \n        function processVideo() {\n            let begin = Date.now();\n            if (video.srcObject!=null){\n                cap.read(src);\n                src.copyTo(dst);\n                cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\n                console.log('process classifier:', classifier);\n                // console.log(classifier.load);\n                // console.log(gray);\n                // console.log(faces);\n                \n    \n                try{\n                    classifier.detectMultiScale(gray, faces, 1.1, 3);\n\n                }catch(err){\n                    console.log(err);\n                }\n                // for (let i = 0; i < faces.size(); ++i) {\n                //     let face = faces.get(i);\n                //     // console.log(face);\n                //     let face_row = parseInt(face.y/clip_height);\n                //     let face_col = parseInt(face.x/clip_width);\n    \n                //     let tmp_row = parseInt((face.y+face.height-5) / clip_height);\n                //     let tmp_col = parseInt((face.x+face.width-5) / clip_width);\n                //     // console.log([face_row, face_col, tmp_row, tmp_col]);\n                //     if (face.width>=clip_width || face.height>=clip_height || tmp_row!=face_row || tmp_col!=face_col)\n                //         continue;\n    \n                //     let point1 = new cv.Point(face.x, face.y);\n                //     let point2 = new cv.Point(face.x + face.width, face.y + face.height);\n                //     cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);\n                // }\n                cv.imshow(\"canvas_output\", gray);\n            }\n            // schedule next one.\n            let delay = 1000/FPS - (Date.now() - begin);\n            setTimeout(processVideo, delay);\n        }\n        // schedule first one.\n        setTimeout(processVideo, 0);\n        \n    }\n\n\n    // const cv = useOpenCv()\n    // console.log(cv)\n\n    // const video = document.getElementById(\"video\");\n    // let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n    // let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n    // let gray = new cv.Mat();\n    // let cap = new cv.VideoCapture(video);\n    // let faces = new cv.RectVector();\n    // let classifier = new cv.CascadeClassifier();\n\n    // let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\n    // classifier.load(faceCascadeFile);\n    // console.log(classifier);\n\n    // function onOpenUtilsReady() {\n    //     let utils = new Utils('errorMessage');\n    //     utils.loadOpenCv(() => {\n    //     let faceCascadeFile = 'haarcascade_frontalface_default.xml';\n    //         utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n    //             document.getElementById('status').innerHTML = 'OpenCV.js is ready.';\n    //         });\n    //     });\n    // }\n\n    return (\n        <>\n        <div className=\"container\">\n            <h2 id=\"title\">iExam</h2>\n            <h6 id=\"tip\">Please click add button to import the Zoom stream. Then you can scroll down to the iExam window.</h6>\n            <p id=\"zoom_window_text\">Zoom window</p>\n            <video id=\"cam_input\" width=\"1200\" height=\"690\" autoPlay muted></video>\n            {/* <img id=\"add\" src=\"add.svg\" alt=\"upload video window\" width=\"128\" height=\"128\" /> */}\n            <svg xmlns=\"http://www.w3.org/2000/svg\" id=\"add\" onClick={catchZoomWindow} width=\"120\" height=\"120\" viewBox=\"0 0 24 24\"><path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\"/></svg>\n            <p id=\"process_window_text\">iExam window</p>\n            <canvas id=\"canvas_output\" width=\"1200\" height=\"690\">This box is for capturing student face</canvas>\n        </div>\n        <div className=\"footer\">\n            <p>Details for iExam please refer to slides: <a href=\"https://daoyuan14.github.io/slides/Expo21_iExam.pdf\" target=\"_blank\">https://daoyuan14.github.io/slides/Expo21_iExam.pdf</a></p>\n            <p>Post-exam recording analysis for desktop version, please view: <a href=\"https://github.com/VPRLab/iExam/tree/test\" target=\"_blank\">https://github.com/VPRLab/iExam/tree/test </a></p>\n            {/* <p id=\"author\">Author: YANG Xu, Supervisor: WU Daoyuan (VPRLab)</p>\n            <p>Last Modified: Mon Oct 25 2021 23:12:29 GMT+0800 (Hong Kong Standard Time)</p> */}\n        </div>\n        </>\n        \n    )\n}\n\n// function Utils() {\n//     let self = this;\n//     this.createFileFromUrl = function(path, url, callback) {\n//         console.log(cv);\n//         let request = new XMLHttpRequest();\n//         request.open('GET', url, true);\n//         request.responseType = 'arraybuffer';\n//         request.onload = function(ev) {\n//             if (request.readyState === 4) {\n//                 if (request.status === 200) {\n//                     let data = new Uint8Array(request.response);\n//                     cv.FS_createDataFile('/', path, data, true, false, false);\n//                     callback();\n//                 } else {\n//                     self.printError('Failed to load ' + url + ' status: ' + request.status);\n//                 }\n//             }\n//         };\n//         request.send();\n        \n//     };\n\n//     const OPENCV_URL = './opencv/opencv.js';\n//     this.loadOpenCv = function(onloadCallback) {\n//         let script = document.createElement('script');\n//         script.setAttribute('async', '');\n//         script.setAttribute('type', 'text/javascript');\n//         script.addEventListener('load', async () => {\n//             if (cv.getBuildInformation)\n//             {\n//                 console.log(cv.getBuildInformation());\n//                 onloadCallback();\n//             }\n//             else\n//             {\n//                 // WASM\n//                 if (cv instanceof Promise) {\n//                     cv = await cv;\n//                     console.log(cv.getBuildInformation());\n//                     onloadCallback();\n//                 } else {\n//                     cv['onRuntimeInitialized']=()=>{  //satisfy this condition\n//                         console.log(cv.getBuildInformation()); \n//                         onloadCallback();\n//                     }\n//                 }\n//             }\n//         });\n//         script.addEventListener('error', () => {\n//             self.printError('Failed to load ' + OPENCV_URL);\n//         });\n//         script.src = OPENCV_URL;\n//         let node = document.getElementsByTagName('script')[0];\n//         node.parentNode.insertBefore(script, node);\n//     };\n// }\n\n\n\nexport default MyComponent;\n\n\n"]},"metadata":{},"sourceType":"module"}