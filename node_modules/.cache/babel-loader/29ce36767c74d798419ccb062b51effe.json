{"ast":null,"code":"var _jsxFileName = \"/Users/yangxu/newapp/src/MyComponent.js\",\n    _s = $RefreshSig$();\n\nimport { OpenCvProvideruseOpenCv } from 'opencv-react';\nimport VideoCanvas from './VideoCanvas';\nimport { useEffect, useState } from 'react';\nimport { OpenCvProvider, useOpenCv } from 'opencv-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction MyComponent() {\n  _s();\n\n  const {\n    loaded,\n    cv\n  } = useOpenCv();\n  const video = document.getElementById(\"video\");\n  const canvas = document.getElementById(\"canvas\");\n  var temCanvas = document.createElement('canvas');\n  const temCtx = temCanvas.getContext(\"2d\");\n  const img_previous = new Image();\n  const img_now = new Image();\n  let utils = new Utils(); // if (video.srcObject!= null)\n  // temCtx.drawImage(video, 0, 0);\n\n  const [count, setCount] = useState(0);\n  const [videoLoaded, setVideoLoaded] = useState(false);\n\n  const VideoUpload = () => {\n    if (!videoLoaded) {\n      navigator.mediaDevices.getDisplayMedia({\n        video: {\n          width: 1280,\n          height: 720\n        },\n        audio: false\n      }).then(function (stream) {\n        video.srcObject = stream;\n        setVideoLoaded(true);\n        const settings = stream.getVideoTracks()[0].getSettings();\n        console.log(settings); // console.log('width' + stream.offsetWidth);\n\n        video.height = settings.height; // // resize video size\n\n        video.width = settings.width;\n        canvas.width = settings.width; // resize canvas size\n\n        canvas.height = settings.height;\n        temCtx.drawImage(video, 0, 0);\n        img_previous.src = \"https://en.wikipedia.org/wiki/Chinese_University_of_Hong_Kong#/media/File:CUHK.svg\";\n        video.play(); // GetFrame();\n      }).catch(function (err) {\n        console.log(\"No choose shared window! \" + err);\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (cv) {\n      // console.log(cv);\n      // console.log(loaded);\n      console.log(\"count: \" + count);\n\n      if (video.srcObject != null) {\n        let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n        let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n        let gray = new cv.Mat();\n        let cap = new cv.VideoCapture(video);\n        let faces = new cv.RectVector();\n        let classifier = new cv.CascadeClassifier();\n        let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\n\n        let utils = new Utils(cv, 'errorMessage');\n        utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n          classifier.load(faceCascadeFile); // in the callback, load the cascade from file \n        });\n        console.log(classifier);\n        var begin = Date.now();\n        cap.read(src);\n        src.copyTo(dst);\n        cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0); // try{\n        //     classifier.detectMultiScale(gray, faces, 1.1, 3, 0);\n        //     console.log(faces.size());\n        // }catch(err){\n        //     console.log(err);\n        // }\n        // for (let i = 0; i < faces.size(); ++i) {\n        //     let face = faces.get(i);\n        //     let point1 = new cv.Point(face.x, face.y);\n        //     let point2 = new cv.Point(face.x + face.width, face.y + face.height);\n        //     cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);\n        // }\n\n        cv.imshow(\"canvas\", dst);\n        img_now.src = temCanvas.toDataURL('image/jpg');\n        console.log(img_previous.src);\n        console.log(img_now.src);\n        console.log(img_previous === img_now.src);\n\n        if (img_previous.src != img_now.src) {\n          img_previous.src = img_now.src;\n          console.log(\"AAA\"); // setCount(count+1);\n        }\n      }\n\n      const FPS = 30; // const processVideo = () =>{\n      //     if (video.srcObject!= null)\n      //     {\n      //         // console.log(video.srcObject);\n      //         let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n      //         let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n      //         let gray = new cv.Mat();\n      //         let cap = new cv.VideoCapture(video);\n      //         let faces = new cv.RectVector();\n      //         let classifier = new cv.CascadeClassifier();\n      //         let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\n      //         // let utils = new Utils(cv, 'errorMessage');\n      //         // utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n      //         //     classifier.load(faceCascadeFile); // in the callback, load the cascade from file \n      //         // });\n      //         console.log(classifier);\n      //         const detectFace = () => {\n      //             var begin = Date.now();\n      //             cap.read(src);\n      //             src.copyTo(dst);\n      //             cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\n      //             // try{\n      //             //     classifier.detectMultiScale(gray, faces, 1.1, 3, 0);\n      //             //     console.log(faces.size());\n      //             // }catch(err){\n      //             //     console.log(err);\n      //             // }\n      //             // for (let i = 0; i < faces.size(); ++i) {\n      //             //     let face = faces.get(i);\n      //             //     let point1 = new cv.Point(face.x, face.y);\n      //             //     let point2 = new cv.Point(face.x + face.width, face.y + face.height);\n      //             //     cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);\n      //             // }\n      //             cv.imshow(\"canvas\", dst);\n      //             // schedule next one.\n      //             let delay = 1000/FPS - (Date.now() - begin);\n      //             setTimeout(detectFace, delay);\n      //             console.log(\"detect\");\n      //         }\n      //         setTimeout(detectFace, 0);\n      //         setTimeout(() => { clearInterval(timer) }, 0);\n      //     }\n      //     // console.log(\"AAA\");\n      //     let timer = setTimeout(processVideo, 10);\n      //     console.log(\"delay\");\n      // }\n      // // schedule first one.\n      // setTimeout(processVideo, 0);\n    }\n  }, [cv, video, count, videoLoaded]); // const cv = useOpenCv()\n  // console.log(cv)\n  // const video = document.getElementById(\"video\");\n  // let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n  // let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n  // let gray = new cv.Mat();\n  // let cap = new cv.VideoCapture(video);\n  // let faces = new cv.RectVector();\n  // let classifier = new cv.CascadeClassifier();\n  // let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\n  // classifier.load(faceCascadeFile);\n  // console.log(classifier);\n  // function onOpenUtilsReady() {\n  //     let utils = new Utils('errorMessage');\n  //     utils.loadOpenCv(() => {\n  //     let faceCascadeFile = 'haarcascade_frontalface_default.xml';\n  //         utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n  //             document.getElementById('status').innerHTML = 'OpenCV.js is ready.';\n  //         });\n  //     });\n  // }\n\n  const onLoaded = cv => {\n    console.log('opencv loaded, cv');\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(OpenCvProvider, {\n      onLoad: onLoaded,\n      openCvPath: \"./opencv/opencv.js\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"status\",\n        children: \"OpenCV.js is loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"videocontainer\",\n          children: [/*#__PURE__*/_jsxDEV(\"video\", {\n            className: \"center\",\n            id: \"video\",\n            muted: true,\n            onClick: VideoUpload\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n            className: \"center\",\n            id: \"temcanvas\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"center\",\n            id: \"startMessage\",\n            children: /*#__PURE__*/_jsxDEV(\"svg\", {\n              xmlns: \"http://www.w3.org/2000/svg\",\n              width: \"120\",\n              height: \"120\",\n              viewBox: \"0 0 24 24\",\n              children: /*#__PURE__*/_jsxDEV(\"path\", {\n                d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 106\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"processcontainer\",\n          children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n            className: \"center\",\n            id: \"canvas\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(MyComponent, \"h9ro0BHJdAOcVjzaOypUggy9LRU=\", false, function () {\n  return [useOpenCv];\n});\n\n_c = MyComponent;\n\nfunction Utils() {\n  let self = this;\n\n  this.createFileFromUrl = function (path, url, callback) {\n    console.log(cv);\n    let request = new XMLHttpRequest();\n    request.open('GET', url, true);\n    request.responseType = 'arraybuffer';\n\n    request.onload = function (ev) {\n      if (request.readyState === 4) {\n        if (request.status === 200) {\n          let data = new Uint8Array(request.response);\n          cv.FS_createDataFile('/', path, data, true, false, false);\n          callback();\n        } else {\n          self.printError('Failed to load ' + url + ' status: ' + request.status);\n        }\n      }\n    };\n\n    request.send();\n  };\n\n  const OPENCV_URL = './opencv/opencv.js';\n\n  this.loadOpenCv = function (onloadCallback) {\n    let script = document.createElement('script');\n    script.setAttribute('async', '');\n    script.setAttribute('type', 'text/javascript');\n    script.addEventListener('load', async () => {\n      if (cv.getBuildInformation) {\n        console.log(cv.getBuildInformation());\n        onloadCallback();\n      } else {\n        // WASM\n        if (cv instanceof Promise) {\n          cv = await cv;\n          console.log(cv.getBuildInformation());\n          onloadCallback();\n        } else {\n          cv['onRuntimeInitialized'] = () => {\n            //satisfy this condition\n            console.log(cv.getBuildInformation());\n            onloadCallback();\n          };\n        }\n      }\n    });\n    script.addEventListener('error', () => {\n      self.printError('Failed to load ' + OPENCV_URL);\n    });\n    script.src = OPENCV_URL;\n    let node = document.getElementsByTagName('script')[0];\n    node.parentNode.insertBefore(script, node);\n  };\n}\n\n_c2 = Utils;\nexport default MyComponent;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MyComponent\");\n$RefreshReg$(_c2, \"Utils\");","map":{"version":3,"sources":["/Users/yangxu/newapp/src/MyComponent.js"],"names":["OpenCvProvideruseOpenCv","VideoCanvas","useEffect","useState","OpenCvProvider","useOpenCv","MyComponent","loaded","cv","video","document","getElementById","canvas","temCanvas","createElement","temCtx","getContext","img_previous","Image","img_now","utils","Utils","count","setCount","videoLoaded","setVideoLoaded","VideoUpload","navigator","mediaDevices","getDisplayMedia","width","height","audio","then","stream","srcObject","settings","getVideoTracks","getSettings","console","log","drawImage","src","play","catch","err","Mat","CV_8UC4","dst","CV_8UC1","gray","cap","VideoCapture","faces","RectVector","classifier","CascadeClassifier","faceCascadeFile","createFileFromUrl","load","begin","Date","now","read","copyTo","cvtColor","COLOR_RGBA2GRAY","imshow","toDataURL","FPS","onLoaded","self","path","url","callback","request","XMLHttpRequest","open","responseType","onload","ev","readyState","status","data","Uint8Array","response","FS_createDataFile","printError","send","OPENCV_URL","loadOpenCv","onloadCallback","script","setAttribute","addEventListener","getBuildInformation","Promise","node","getElementsByTagName","parentNode","insertBefore"],"mappings":"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","sourcesContent":["import { OpenCvProvideruseOpenCv } from 'opencv-react'\nimport VideoCanvas from './VideoCanvas';\nimport {useEffect, useState} from 'react'\n\nimport { OpenCvProvider, useOpenCv } from 'opencv-react'\n\n\n\n\nfunction MyComponent() {\n    const { loaded, cv } = useOpenCv();\n    const video = document.getElementById(\"video\");\n    const canvas = document.getElementById(\"canvas\");\n    var temCanvas = document.createElement('canvas');\n    const temCtx = temCanvas.getContext(\"2d\");\n    const img_previous = new Image();\n    const img_now = new Image();\n    let utils = new Utils();\n    // if (video.srcObject!= null)\n    // temCtx.drawImage(video, 0, 0);\n\n    const [count, setCount] = useState(0);\n    const [videoLoaded, setVideoLoaded] = useState(false);\n\n    const VideoUpload = () =>{\n        \n        if (!videoLoaded) {\n            navigator.mediaDevices.getDisplayMedia({ video: { width: 1280, height: 720 }, audio: false })\n            .then(function(stream) {\n                video.srcObject = stream;\n                setVideoLoaded(true);\n\n                const settings = stream.getVideoTracks()[0].getSettings();\n                console.log(settings);\n                // console.log('width' + stream.offsetWidth);\n\n                video.height = settings.height; // // resize video size\n                video.width = settings.width;\n                canvas.width = settings.width; // resize canvas size\n                canvas.height = settings.height;\n                temCtx.drawImage(video, 0, 0);\n                img_previous.src = \"https://en.wikipedia.org/wiki/Chinese_University_of_Hong_Kong#/media/File:CUHK.svg\";\n                \n                video.play();\n                // GetFrame();\n                \n            })\n            .catch(function(err) {\n                console.log(\"No choose shared window! \" + err);\n            });\n            \n        }\n    }\n    \n    useEffect(() => {\n        if (cv) {\n            // console.log(cv);\n            // console.log(loaded);\n            console.log(\"count: \"+ count);\n            \n            if (video.srcObject!= null){\n\n                let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n                let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n                let gray = new cv.Mat();\n                let cap = new cv.VideoCapture(video);\n                let faces = new cv.RectVector();\n                let classifier = new cv.CascadeClassifier();\n                let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\n                let utils = new Utils(cv, 'errorMessage');\n                utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n                    classifier.load(faceCascadeFile); // in the callback, load the cascade from file \n                });\n                console.log(classifier);\n                \n                \n                var begin = Date.now();\n                cap.read(src);\n                src.copyTo(dst);\n                cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\n                // try{\n                //     classifier.detectMultiScale(gray, faces, 1.1, 3, 0);\n                //     console.log(faces.size());\n                // }catch(err){\n                //     console.log(err);\n                // }\n                // for (let i = 0; i < faces.size(); ++i) {\n                //     let face = faces.get(i);\n                //     let point1 = new cv.Point(face.x, face.y);\n                //     let point2 = new cv.Point(face.x + face.width, face.y + face.height);\n                //     cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);\n                // }\n                cv.imshow(\"canvas\", dst);\n                \n                img_now.src = temCanvas.toDataURL('image/jpg');\n                console.log(img_previous.src);\n                console.log(img_now.src);\n                console.log(img_previous  === img_now.src)\n                if (img_previous.src != img_now.src){\n                    img_previous.src = img_now.src;\n                    console.log(\"AAA\");\n                    // setCount(count+1);\n                }\n            }\n\n            const FPS = 30;\n\n            // const processVideo = () =>{\n                \n            //     if (video.srcObject!= null)\n            //     {\n            //         // console.log(video.srcObject);\n            //         let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n            //         let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n            //         let gray = new cv.Mat();\n            //         let cap = new cv.VideoCapture(video);\n            //         let faces = new cv.RectVector();\n            //         let classifier = new cv.CascadeClassifier();\n            //         let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\n            //         // let utils = new Utils(cv, 'errorMessage');\n            //         // utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n            //         //     classifier.load(faceCascadeFile); // in the callback, load the cascade from file \n            //         // });\n            //         console.log(classifier);\n                    \n            //         const detectFace = () => {\n            //             var begin = Date.now();\n            //             cap.read(src);\n            //             src.copyTo(dst);\n            //             cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\n            //             // try{\n            //             //     classifier.detectMultiScale(gray, faces, 1.1, 3, 0);\n            //             //     console.log(faces.size());\n            //             // }catch(err){\n            //             //     console.log(err);\n            //             // }\n            //             // for (let i = 0; i < faces.size(); ++i) {\n            //             //     let face = faces.get(i);\n            //             //     let point1 = new cv.Point(face.x, face.y);\n            //             //     let point2 = new cv.Point(face.x + face.width, face.y + face.height);\n            //             //     cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);\n            //             // }\n            //             cv.imshow(\"canvas\", dst);\n                        \n                        \n            //             // schedule next one.\n            //             let delay = 1000/FPS - (Date.now() - begin);\n            //             setTimeout(detectFace, delay);\n            //             console.log(\"detect\");\n            //         }\n            //         setTimeout(detectFace, 0);\n            //         setTimeout(() => { clearInterval(timer) }, 0);\n            //     }\n            //     // console.log(\"AAA\");\n            //     let timer = setTimeout(processVideo, 10);\n            //     console.log(\"delay\");\n                \n            // }\n            // // schedule first one.\n            // setTimeout(processVideo, 0);\n\n        }\n    }, [cv, video,count, videoLoaded])\n\n    // const cv = useOpenCv()\n    // console.log(cv)\n\n    // const video = document.getElementById(\"video\");\n    // let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n    // let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n    // let gray = new cv.Mat();\n    // let cap = new cv.VideoCapture(video);\n    // let faces = new cv.RectVector();\n    // let classifier = new cv.CascadeClassifier();\n\n    // let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\n    // classifier.load(faceCascadeFile);\n    // console.log(classifier);\n\n    // function onOpenUtilsReady() {\n    //     let utils = new Utils('errorMessage');\n    //     utils.loadOpenCv(() => {\n    //     let faceCascadeFile = 'haarcascade_frontalface_default.xml';\n    //         utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n    //             document.getElementById('status').innerHTML = 'OpenCV.js is ready.';\n    //         });\n    //     });\n    // }\n\n    const onLoaded = (cv) => {\n        console.log('opencv loaded, cv')\n    }\n\n    return (\n        <>\n        <OpenCvProvider onLoad={onLoaded} openCvPath='./opencv/opencv.js'>\n        <p id=\"status\">OpenCV.js is loading...</p>\n        <div>\n            <div id=\"videocontainer\">\n                <video className=\"center\" id=\"video\" muted onClick={VideoUpload}></video>\n                <canvas className=\"center\" id=\"temcanvas\" ></canvas>\n                <div className=\"center\" id=\"startMessage\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"120\" height=\"120\" viewBox=\"0 0 24 24\"><path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\"/></svg>\n                </div>\n            </div>\n            <br />\n            <div id=\"processcontainer\" >\n                {/* <OpenCvProvider onLoad={onLoaded} openCvPath='/opencv/opencv.js'> */}\n                    <canvas className=\"center\" id=\"canvas\" ></canvas>\n                {/* </OpenCvProvider> */}\n            </div>\n        </div>\n        {/* <script async src=\"./utils.js\" onLoad={onOpenUtilsReady} type=\"text/javascript\"></script> */}\n        </OpenCvProvider>\n        </>\n        \n    )\n}\n\nfunction Utils() {\n    let self = this;\n    this.createFileFromUrl = function(path, url, callback) {\n        console.log(cv);\n        let request = new XMLHttpRequest();\n        request.open('GET', url, true);\n        request.responseType = 'arraybuffer';\n        request.onload = function(ev) {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    let data = new Uint8Array(request.response);\n                    cv.FS_createDataFile('/', path, data, true, false, false);\n                    callback();\n                } else {\n                    self.printError('Failed to load ' + url + ' status: ' + request.status);\n                }\n            }\n        };\n        request.send();\n        \n    };\n\n    const OPENCV_URL = './opencv/opencv.js';\n    this.loadOpenCv = function(onloadCallback) {\n        let script = document.createElement('script');\n        script.setAttribute('async', '');\n        script.setAttribute('type', 'text/javascript');\n        script.addEventListener('load', async () => {\n            if (cv.getBuildInformation)\n            {\n                console.log(cv.getBuildInformation());\n                onloadCallback();\n            }\n            else\n            {\n                // WASM\n                if (cv instanceof Promise) {\n                    cv = await cv;\n                    console.log(cv.getBuildInformation());\n                    onloadCallback();\n                } else {\n                    cv['onRuntimeInitialized']=()=>{  //satisfy this condition\n                        console.log(cv.getBuildInformation()); \n                        onloadCallback();\n                    }\n                }\n            }\n        });\n        script.addEventListener('error', () => {\n            self.printError('Failed to load ' + OPENCV_URL);\n        });\n        script.src = OPENCV_URL;\n        let node = document.getElementsByTagName('script')[0];\n        node.parentNode.insertBefore(script, node);\n    };\n}\n\n\n\nexport default MyComponent;\n\n\n"]},"metadata":{},"sourceType":"module"}