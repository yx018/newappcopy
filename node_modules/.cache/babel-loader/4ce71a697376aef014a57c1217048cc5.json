{"ast":null,"code":"let add_button = document.getElementById(\"add\");\nlet zoom_window_text = document.getElementById(\"zoom_window_text\");\nlet process_window_text = document.getElementById(\"process_window_text\");\nlet video = document.getElementById(\"cam_input\");\nlet output = document.getElementById(\"canvas_output\");\nlet container = document.getElementById(\"container\"); // let utils = new Utils();\n\nexport default function checkBrowser() {\n  if ((navigator.userAgent.indexOf(\"Opera\") || navigator.userAgent.indexOf('OPR')) != -1 || navigator.userAgent.indexOf(\"Chrome\") != -1 || navigator.userAgent.indexOf(\"Firefox\") != -1 || navigator.userAgent.indexOf(\"MSIE\") != -1 || !!document.documentMode == true) console.log(\"browser owns capture window function\");else if (navigator.userAgent.indexOf(\"Safari\") != -1) {\n    while (true) alert(\"You use Safari now, please change another browser because Safari not support capture window function\");\n  } else alert('unknown');\n} // add.addEventListener(\"click\", function(e) {\n//     navigator.mediaDevices.getDisplayMedia({ video: true, audio: false })\n//     .then(function(stream) {\n//         video.srcObject = stream;\n//         let settings = stream.getVideoTracks()[0].getSettings();\n//         console.log(settings);\n//         add_button.style.display = \"none\";\n//         zoom_window_text.style.display = \"none\";\n//         process_window_text.style.display = \"none\";\n//         // FPS = settings.frameRate;\n//         output.style.width = video.style.width;\n//         output.style.height = video.style.height;\n//         video.play();\n//     })\n//     .then(()=> {\n//         utils.loadOpenCv(openCvReady);\n//     })\n//     .catch(function(err) {\n//         console.log(\"An error occurred! \" + err);\n//     });\n// })\n// function openCvReady() {\n//     // console.log(cv);\n//     let FPS = 30;\n//     let video = document.getElementById(\"cam_input\");\n//     let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n//     let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n//     let gray = new cv.Mat();\n//     let cap = new cv.VideoCapture(cam_input);\n//     let faces = new cv.RectVector();\n//     let classifier = new cv.CascadeClassifier();\n//     let minsize = new cv.Size(0, 0);\n//     let maxsize = new cv.Size(1000, 1000);\n//     let faceCascadeFile = 'haarcascade_frontalface_default.xml';\n//     utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n//         classifier.load(faceCascadeFile); // in the callback, load the cascade from file \n//     });\n//     let face_row = -1;\n//     let face_col = -1;\n//     let clip_width = video.width/5;\n//     let clip_height = video.height/5;\n//     function processVideo() {\n//         let begin = Date.now();\n//         if (video.srcObject!=null){\n//             cap.read(src);\n//             src.copyTo(dst);\n//             cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\n//             try{\n//                 classifier.detectMultiScale(gray, faces, 1.1, 3);\n//                 console.log(\"face size: \"+ faces.size());\n//             }catch(err){\n//                 console.log(err);\n//             }\n//             for (let i = 0; i < faces.size(); ++i) {\n//                 let face = faces.get(i);\n//                 // console.log(face);\n//                 let face_row = parseInt(face.y/clip_height);\n//                 let face_col = parseInt(face.x/clip_width);\n//                 let tmp_row = parseInt((face.y+face.height-5) / clip_height);\n//                 let tmp_col = parseInt((face.x+face.width-5) / clip_width);\n//                 // console.log([face_row, face_col, tmp_row, tmp_col]);\n//                 if (face.width>=clip_width || face.height>=clip_height || tmp_row!=face_row || tmp_col!=face_col)\n//                     continue;\n//                 let point1 = new cv.Point(face.x, face.y);\n//                 let point2 = new cv.Point(face.x + face.width, face.y + face.height);\n//                 cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);\n//             }\n//             cv.imshow(\"canvas_output\", dst);\n//         }\n//         // schedule next one.\n//         let delay = 1000/FPS - (Date.now() - begin);\n//         setTimeout(processVideo, delay);\n//     }\n//     // schedule first one.\n//     setTimeout(processVideo, 0); \n// }\n// function Utils() {\n//     let self = this;\n//     this.createFileFromUrl = function(path, url, callback) {\n//         let request = new XMLHttpRequest();\n//         request.open('GET', url, true);\n//         request.responseType = 'arraybuffer';\n//         request.onload = function(ev) {\n//             if (request.readyState === 4) {\n//                 if (request.status === 200) {\n//                     let data = new Uint8Array(request.response);\n//                     cv.FS_createDataFile('/', path, data, true, false, false);\n//                     callback();\n//                 } else {\n//                     self.printError('Failed to load ' + url + ' status: ' + request.status);\n//                 }\n//             }\n//         };\n//         request.send();\n//     };\n//     const OPENCV_URL = 'opencv.js';\n//     this.loadOpenCv = function(onloadCallback) {\n//         let script = document.createElement('script');\n//         script.setAttribute('async', '');\n//         script.setAttribute('type', 'text/javascript');\n//         script.addEventListener('load', async () => {\n//             if (cv.getBuildInformation)\n//             {\n//                 console.log(cv.getBuildInformation());\n//                 onloadCallback();\n//             }\n//             else\n//             {\n//                 // WASM\n//                 if (cv instanceof Promise) {\n//                     cv = await cv;\n//                     console.log(cv.getBuildInformation());\n//                     onloadCallback();\n//                 } else {\n//                     cv['onRuntimeInitialized']=()=>{  //satisfy this condition\n//                         console.log(cv.getBuildInformation()); \n//                         onloadCallback();\n//                     }\n//                 }\n//             }\n//         });\n//         script.addEventListener('error', () => {\n//             self.printError('Failed to load ' + OPENCV_URL);\n//         });\n//         script.src = OPENCV_URL;\n//         let node = document.getElementsByTagName('script')[0];\n//         node.parentNode.insertBefore(script, node);\n//     };\n// }","map":{"version":3,"sources":["/Users/yangxu/newapp/src/iexam.js"],"names":["add_button","document","getElementById","zoom_window_text","process_window_text","video","output","container","checkBrowser","navigator","userAgent","indexOf","documentMode","console","log","alert"],"mappings":"AACA,IAAIA,UAAU,GAAGC,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAAjB;AACA,IAAIC,gBAAgB,GAAGF,QAAQ,CAACC,cAAT,CAAwB,kBAAxB,CAAvB;AACA,IAAIE,mBAAmB,GAAGH,QAAQ,CAACC,cAAT,CAAwB,qBAAxB,CAA1B;AACA,IAAIG,KAAK,GAAGJ,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAAZ;AACA,IAAII,MAAM,GAAGL,QAAQ,CAACC,cAAT,CAAwB,eAAxB,CAAb;AACA,IAAIK,SAAS,GAAGN,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAAhB,C,CACA;;AAEA,eAAe,SAASM,YAAT,GAAwB;AACnC,MAAG,CAACC,SAAS,CAACC,SAAV,CAAoBC,OAApB,CAA4B,OAA5B,KAAwCF,SAAS,CAACC,SAAV,CAAoBC,OAApB,CAA4B,KAA5B,CAAzC,KAAgF,CAAC,CAAjF,IAAsFF,SAAS,CAACC,SAAV,CAAoBC,OAApB,CAA4B,QAA5B,KAAyC,CAAC,CAAhI,IAAqIF,SAAS,CAACC,SAAV,CAAoBC,OAApB,CAA4B,SAA5B,KAA0C,CAAC,CAAhL,IAAuLF,SAAS,CAACC,SAAV,CAAoBC,OAApB,CAA4B,MAA5B,KAAuC,CAAC,CAAzC,IAAiD,CAAC,CAACV,QAAQ,CAACW,YAAX,IAA2B,IAArQ,EACIC,OAAO,CAACC,GAAR,CAAY,sCAAZ,EADJ,KAEK,IAAGL,SAAS,CAACC,SAAV,CAAoBC,OAApB,CAA4B,QAA5B,KAAyC,CAAC,CAA7C,EAA+C;AAChD,WAAM,IAAN,EACII,KAAK,CAAC,sGAAD,CAAL;AACP,GAHI,MAKFA,KAAK,CAAC,SAAD,CAAL;AACN,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["\nlet add_button = document.getElementById(\"add\");\nlet zoom_window_text = document.getElementById(\"zoom_window_text\");\nlet process_window_text = document.getElementById(\"process_window_text\");\nlet video = document.getElementById(\"cam_input\");\nlet output = document.getElementById(\"canvas_output\");\nlet container = document.getElementById(\"container\");\n// let utils = new Utils();\n\nexport default function checkBrowser() {\n    if((navigator.userAgent.indexOf(\"Opera\") || navigator.userAgent.indexOf('OPR')) != -1 || navigator.userAgent.indexOf(\"Chrome\") != -1 || navigator.userAgent.indexOf(\"Firefox\") != -1 || ((navigator.userAgent.indexOf(\"MSIE\") != -1 ) || (!!document.documentMode == true )))\n        console.log(\"browser owns capture window function\")\n    else if(navigator.userAgent.indexOf(\"Safari\") != -1){\n        while(true)\n            alert(\"You use Safari now, please change another browser because Safari not support capture window function\");\n    }\n    else \n       alert('unknown');\n}\n\n// add.addEventListener(\"click\", function(e) {\n//     navigator.mediaDevices.getDisplayMedia({ video: true, audio: false })\n//     .then(function(stream) {\n//         video.srcObject = stream;\n//         let settings = stream.getVideoTracks()[0].getSettings();\n//         console.log(settings);\n//         add_button.style.display = \"none\";\n//         zoom_window_text.style.display = \"none\";\n//         process_window_text.style.display = \"none\";\n//         // FPS = settings.frameRate;\n//         output.style.width = video.style.width;\n//         output.style.height = video.style.height;\n//         video.play();\n//     })\n//     .then(()=> {\n//         utils.loadOpenCv(openCvReady);\n//     })\n//     .catch(function(err) {\n//         console.log(\"An error occurred! \" + err);\n//     });\n// })\n\n// function openCvReady() {\n//     // console.log(cv);\n//     let FPS = 30;\n//     let video = document.getElementById(\"cam_input\");\n//     let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n//     let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n//     let gray = new cv.Mat();\n//     let cap = new cv.VideoCapture(cam_input);\n//     let faces = new cv.RectVector();\n//     let classifier = new cv.CascadeClassifier();\n//     let minsize = new cv.Size(0, 0);\n//     let maxsize = new cv.Size(1000, 1000);\n//     let faceCascadeFile = 'haarcascade_frontalface_default.xml';\n//     utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n//         classifier.load(faceCascadeFile); // in the callback, load the cascade from file \n//     });\n//     let face_row = -1;\n//     let face_col = -1;\n//     let clip_width = video.width/5;\n//     let clip_height = video.height/5;\n//     function processVideo() {\n//         let begin = Date.now();\n//         if (video.srcObject!=null){\n//             cap.read(src);\n//             src.copyTo(dst);\n//             cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\n//             try{\n//                 classifier.detectMultiScale(gray, faces, 1.1, 3);\n//                 console.log(\"face size: \"+ faces.size());\n//             }catch(err){\n//                 console.log(err);\n//             }\n//             for (let i = 0; i < faces.size(); ++i) {\n//                 let face = faces.get(i);\n//                 // console.log(face);\n//                 let face_row = parseInt(face.y/clip_height);\n//                 let face_col = parseInt(face.x/clip_width);\n\n//                 let tmp_row = parseInt((face.y+face.height-5) / clip_height);\n//                 let tmp_col = parseInt((face.x+face.width-5) / clip_width);\n//                 // console.log([face_row, face_col, tmp_row, tmp_col]);\n//                 if (face.width>=clip_width || face.height>=clip_height || tmp_row!=face_row || tmp_col!=face_col)\n//                     continue;\n\n//                 let point1 = new cv.Point(face.x, face.y);\n//                 let point2 = new cv.Point(face.x + face.width, face.y + face.height);\n//                 cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);\n//             }\n//             cv.imshow(\"canvas_output\", dst);\n//         }\n//         // schedule next one.\n//         let delay = 1000/FPS - (Date.now() - begin);\n//         setTimeout(processVideo, delay);\n//     }\n//     // schedule first one.\n//     setTimeout(processVideo, 0); \n// }\n\n// function Utils() {\n//     let self = this;\n//     this.createFileFromUrl = function(path, url, callback) {\n//         let request = new XMLHttpRequest();\n//         request.open('GET', url, true);\n//         request.responseType = 'arraybuffer';\n//         request.onload = function(ev) {\n//             if (request.readyState === 4) {\n//                 if (request.status === 200) {\n//                     let data = new Uint8Array(request.response);\n//                     cv.FS_createDataFile('/', path, data, true, false, false);\n//                     callback();\n//                 } else {\n//                     self.printError('Failed to load ' + url + ' status: ' + request.status);\n//                 }\n//             }\n//         };\n//         request.send();\n        \n//     };\n\n//     const OPENCV_URL = 'opencv.js';\n//     this.loadOpenCv = function(onloadCallback) {\n//         let script = document.createElement('script');\n//         script.setAttribute('async', '');\n//         script.setAttribute('type', 'text/javascript');\n//         script.addEventListener('load', async () => {\n//             if (cv.getBuildInformation)\n//             {\n//                 console.log(cv.getBuildInformation());\n//                 onloadCallback();\n//             }\n//             else\n//             {\n//                 // WASM\n//                 if (cv instanceof Promise) {\n//                     cv = await cv;\n//                     console.log(cv.getBuildInformation());\n//                     onloadCallback();\n//                 } else {\n//                     cv['onRuntimeInitialized']=()=>{  //satisfy this condition\n//                         console.log(cv.getBuildInformation()); \n//                         onloadCallback();\n//                     }\n//                 }\n//             }\n//         });\n//         script.addEventListener('error', () => {\n//             self.printError('Failed to load ' + OPENCV_URL);\n//         });\n//         script.src = OPENCV_URL;\n//         let node = document.getElementsByTagName('script')[0];\n//         node.parentNode.insertBefore(script, node);\n//     };\n// }"]},"metadata":{},"sourceType":"module"}