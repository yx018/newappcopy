{"ast":null,"code":"function Iexam() {\n  let add_button = document.getElementById(\"add\");\n  let zoom_window_text = document.getElementById(\"zoom_window_text\");\n  let process_window_text = document.getElementById(\"process_window_text\");\n  let video = document.getElementById(\"cam_input\");\n  let output = document.getElementById(\"canvas_output\");\n  let container = document.getElementById(\"container\");\n  let utils = new Utils();\n\n  function checkBrowser() {\n    if ((navigator.userAgent.indexOf(\"Opera\") || navigator.userAgent.indexOf('OPR')) != -1 || navigator.userAgent.indexOf(\"Chrome\") != -1 || navigator.userAgent.indexOf(\"Firefox\") != -1 || navigator.userAgent.indexOf(\"MSIE\") != -1 || !!document.documentMode == true) console.log(\"browser owns capture window function\");else if (navigator.userAgent.indexOf(\"Safari\") != -1) {\n      while (true) alert(\"You use Safari now, please change another browser because Safari not support capture window function\");\n    } else alert('unknown');\n  }\n\n  add.addEventListener(\"click\", function (e) {\n    navigator.mediaDevices.getDisplayMedia({\n      video: true,\n      audio: false\n    }).then(function (stream) {\n      video.srcObject = stream;\n      let settings = stream.getVideoTracks()[0].getSettings();\n      console.log(settings);\n      add_button.style.display = \"none\";\n      zoom_window_text.style.display = \"none\";\n      process_window_text.style.display = \"none\"; // FPS = settings.frameRate;\n\n      output.style.width = video.style.width;\n      output.style.height = video.style.height;\n      video.play();\n    }).then(() => {\n      utils.loadOpenCv(openCvReady);\n    }).catch(function (err) {\n      console.log(\"An error occurred! \" + err);\n    });\n  });\n\n  function openCvReady() {\n    // console.log(cv);\n    let FPS = 30;\n    let video = document.getElementById(\"cam_input\");\n    let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n    let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n    let gray = new cv.Mat();\n    let cap = new cv.VideoCapture(cam_input);\n    let faces = new cv.RectVector();\n    let classifier = new cv.CascadeClassifier();\n    let minsize = new cv.Size(0, 0);\n    let maxsize = new cv.Size(1000, 1000);\n    let faceCascadeFile = 'haarcascade_frontalface_default.xml';\n    utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n      classifier.load(faceCascadeFile); // in the callback, load the cascade from file \n    });\n    let face_row = -1;\n    let face_col = -1;\n    let clip_width = video.width / 5;\n    let clip_height = video.height / 5;\n\n    function processVideo() {\n      let begin = Date.now();\n\n      if (video.srcObject != null) {\n        cap.read(src);\n        src.copyTo(dst);\n        cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\n\n        try {\n          classifier.detectMultiScale(gray, faces, 1.1, 3);\n          console.log(\"face size: \" + faces.size());\n        } catch (err) {\n          console.log(err);\n        }\n\n        for (let i = 0; i < faces.size(); ++i) {\n          let face = faces.get(i); // console.log(face);\n\n          let face_row = parseInt(face.y / clip_height);\n          let face_col = parseInt(face.x / clip_width);\n          let tmp_row = parseInt((face.y + face.height - 5) / clip_height);\n          let tmp_col = parseInt((face.x + face.width - 5) / clip_width); // console.log([face_row, face_col, tmp_row, tmp_col]);\n\n          if (face.width >= clip_width || face.height >= clip_height || tmp_row != face_row || tmp_col != face_col) continue;\n          let point1 = new cv.Point(face.x, face.y);\n          let point2 = new cv.Point(face.x + face.width, face.y + face.height);\n          cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);\n        }\n\n        cv.imshow(\"canvas_output\", dst);\n      } // schedule next one.\n\n\n      let delay = 1000 / FPS - (Date.now() - begin);\n      setTimeout(processVideo, delay);\n    } // schedule first one.\n\n\n    setTimeout(processVideo, 0);\n  }\n\n  function Utils() {\n    let self = this;\n\n    this.createFileFromUrl = function (path, url, callback) {\n      let request = new XMLHttpRequest();\n      request.open('GET', url, true);\n      request.responseType = 'arraybuffer';\n\n      request.onload = function (ev) {\n        if (request.readyState === 4) {\n          if (request.status === 200) {\n            let data = new Uint8Array(request.response);\n            cv.FS_createDataFile('/', path, data, true, false, false);\n            callback();\n          } else {\n            self.printError('Failed to load ' + url + ' status: ' + request.status);\n          }\n        }\n      };\n\n      request.send();\n    };\n\n    const OPENCV_URL = 'opencv.js';\n\n    this.loadOpenCv = function (onloadCallback) {\n      let script = document.createElement('script');\n      script.setAttribute('async', '');\n      script.setAttribute('type', 'text/javascript');\n      script.addEventListener('load', async () => {\n        if (cv.getBuildInformation) {\n          console.log(cv.getBuildInformation());\n          onloadCallback();\n        } else {\n          // WASM\n          if (cv instanceof Promise) {\n            cv = await cv;\n            console.log(cv.getBuildInformation());\n            onloadCallback();\n          } else {\n            cv['onRuntimeInitialized'] = () => {\n              //satisfy this condition\n              console.log(cv.getBuildInformation());\n              onloadCallback();\n            };\n          }\n        }\n      });\n      script.addEventListener('error', () => {\n        self.printError('Failed to load ' + OPENCV_URL);\n      });\n      script.src = OPENCV_URL;\n      let node = document.getElementsByTagName('script')[0];\n      node.parentNode.insertBefore(script, node);\n    };\n  }\n}\n\n_c = Iexam;\nexport default Iexam;\n\nvar _c;\n\n$RefreshReg$(_c, \"Iexam\");","map":{"version":3,"sources":["/Users/yangxu/newapp/src/iexam.js"],"names":["Iexam","add_button","document","getElementById","zoom_window_text","process_window_text","video","output","container","utils","Utils","checkBrowser","navigator","userAgent","indexOf","documentMode","console","log","alert","add","addEventListener","e","mediaDevices","getDisplayMedia","audio","then","stream","srcObject","settings","getVideoTracks","getSettings","style","display","width","height","play","loadOpenCv","openCvReady","catch","err","FPS","src","cv","Mat","CV_8UC4","dst","CV_8UC1","gray","cap","VideoCapture","cam_input","faces","RectVector","classifier","CascadeClassifier","minsize","Size","maxsize","faceCascadeFile","createFileFromUrl","load","face_row","face_col","clip_width","clip_height","processVideo","begin","Date","now","read","copyTo","cvtColor","COLOR_RGBA2GRAY","detectMultiScale","size","i","face","get","parseInt","y","x","tmp_row","tmp_col","point1","Point","point2","rectangle","imshow","delay","setTimeout","self","path","url","callback","request","XMLHttpRequest","open","responseType","onload","ev","readyState","status","data","Uint8Array","response","FS_createDataFile","printError","send","OPENCV_URL","onloadCallback","script","createElement","setAttribute","getBuildInformation","Promise","node","getElementsByTagName","parentNode","insertBefore"],"mappings":"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","sourcesContent":["function Iexam() {\n    let add_button = document.getElementById(\"add\");\n    let zoom_window_text = document.getElementById(\"zoom_window_text\");\n    let process_window_text = document.getElementById(\"process_window_text\");\n    let video = document.getElementById(\"cam_input\");\n    let output = document.getElementById(\"canvas_output\");\n    let container = document.getElementById(\"container\");\n    let utils = new Utils();\n\n    function checkBrowser() {\n        if((navigator.userAgent.indexOf(\"Opera\") || navigator.userAgent.indexOf('OPR')) != -1 || navigator.userAgent.indexOf(\"Chrome\") != -1 || navigator.userAgent.indexOf(\"Firefox\") != -1 || ((navigator.userAgent.indexOf(\"MSIE\") != -1 ) || (!!document.documentMode == true )))\n            console.log(\"browser owns capture window function\")\n        else if(navigator.userAgent.indexOf(\"Safari\") != -1){\n            while(true)\n                alert(\"You use Safari now, please change another browser because Safari not support capture window function\");\n        }\n        else \n        alert('unknown');\n    }\n\n    add.addEventListener(\"click\", function(e) {\n        navigator.mediaDevices.getDisplayMedia({ video: true, audio: false })\n        .then(function(stream) {\n            video.srcObject = stream;\n            let settings = stream.getVideoTracks()[0].getSettings();\n            console.log(settings);\n            add_button.style.display = \"none\";\n            zoom_window_text.style.display = \"none\";\n            process_window_text.style.display = \"none\";\n            // FPS = settings.frameRate;\n            output.style.width = video.style.width;\n            output.style.height = video.style.height;\n            video.play();\n        })\n        .then(()=> {\n            utils.loadOpenCv(openCvReady);\n        })\n        .catch(function(err) {\n            console.log(\"An error occurred! \" + err);\n        });\n    })\n\n    function openCvReady() {\n        // console.log(cv);\n        let FPS = 30;\n        let video = document.getElementById(\"cam_input\");\n        let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n        let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n        let gray = new cv.Mat();\n        let cap = new cv.VideoCapture(cam_input);\n        let faces = new cv.RectVector();\n        let classifier = new cv.CascadeClassifier();\n        let minsize = new cv.Size(0, 0);\n        let maxsize = new cv.Size(1000, 1000);\n        let faceCascadeFile = 'haarcascade_frontalface_default.xml';\n        utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n            classifier.load(faceCascadeFile); // in the callback, load the cascade from file \n        });\n        let face_row = -1;\n        let face_col = -1;\n        let clip_width = video.width/5;\n        let clip_height = video.height/5;\n        function processVideo() {\n            let begin = Date.now();\n            if (video.srcObject!=null){\n                cap.read(src);\n                src.copyTo(dst);\n                cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\n                try{\n                    classifier.detectMultiScale(gray, faces, 1.1, 3);\n                    console.log(\"face size: \"+ faces.size());\n                }catch(err){\n                    console.log(err);\n                }\n                for (let i = 0; i < faces.size(); ++i) {\n                    let face = faces.get(i);\n                    // console.log(face);\n                    let face_row = parseInt(face.y/clip_height);\n                    let face_col = parseInt(face.x/clip_width);\n\n                    let tmp_row = parseInt((face.y+face.height-5) / clip_height);\n                    let tmp_col = parseInt((face.x+face.width-5) / clip_width);\n                    // console.log([face_row, face_col, tmp_row, tmp_col]);\n                    if (face.width>=clip_width || face.height>=clip_height || tmp_row!=face_row || tmp_col!=face_col)\n                        continue;\n\n                    let point1 = new cv.Point(face.x, face.y);\n                    let point2 = new cv.Point(face.x + face.width, face.y + face.height);\n                    cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);\n                }\n                cv.imshow(\"canvas_output\", dst);\n            }\n            // schedule next one.\n            let delay = 1000/FPS - (Date.now() - begin);\n            setTimeout(processVideo, delay);\n        }\n        // schedule first one.\n        setTimeout(processVideo, 0); \n    }\n\n    function Utils() {\n        let self = this;\n        this.createFileFromUrl = function(path, url, callback) {\n            let request = new XMLHttpRequest();\n            request.open('GET', url, true);\n            request.responseType = 'arraybuffer';\n            request.onload = function(ev) {\n                if (request.readyState === 4) {\n                    if (request.status === 200) {\n                        let data = new Uint8Array(request.response);\n                        cv.FS_createDataFile('/', path, data, true, false, false);\n                        callback();\n                    } else {\n                        self.printError('Failed to load ' + url + ' status: ' + request.status);\n                    }\n                }\n            };\n            request.send();\n            \n        };\n\n        const OPENCV_URL = 'opencv.js';\n        this.loadOpenCv = function(onloadCallback) {\n            let script = document.createElement('script');\n            script.setAttribute('async', '');\n            script.setAttribute('type', 'text/javascript');\n            script.addEventListener('load', async () => {\n                if (cv.getBuildInformation)\n                {\n                    console.log(cv.getBuildInformation());\n                    onloadCallback();\n                }\n                else\n                {\n                    // WASM\n                    if (cv instanceof Promise) {\n                        cv = await cv;\n                        console.log(cv.getBuildInformation());\n                        onloadCallback();\n                    } else {\n                        cv['onRuntimeInitialized']=()=>{  //satisfy this condition\n                            console.log(cv.getBuildInformation()); \n                            onloadCallback();\n                        }\n                    }\n                }\n            });\n            script.addEventListener('error', () => {\n                self.printError('Failed to load ' + OPENCV_URL);\n            });\n            script.src = OPENCV_URL;\n            let node = document.getElementsByTagName('script')[0];\n            node.parentNode.insertBefore(script, node);\n        };\n    }\n}\n\nexport default Iexam;"]},"metadata":{},"sourceType":"module"}