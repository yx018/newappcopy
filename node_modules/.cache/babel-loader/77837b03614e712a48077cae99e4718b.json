{"ast":null,"code":"var _jsxFileName = \"/Users/yangxu/newapp/src/MyComponent.js\",\n    _s = $RefreshSig$();\n\nimport { useOpenCv } from 'opencv-react';\nimport VideoCanvas from './VideoCanvas';\nimport { useEffect, useState } from 'react';\nimport Utils from './utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction MyComponent() {\n  _s();\n\n  const {\n    loaded,\n    cv\n  } = useOpenCv();\n  const video = document.getElementById(\"video\");\n  const canvas = document.getElementById(\"canvas\");\n  var temCanvas = document.createElement('canvas');\n  const temCtx = temCanvas.getContext(\"2d\");\n  const img_previous = new Image();\n  const img_now = new Image(); // if (video.srcObject!= null)\n  // temCtx.drawImage(video, 0, 0);\n\n  const [count, setCount] = useState(0);\n  const [videoLoaded, setVideoLoaded] = useState(false);\n\n  const VideoUpload = () => {\n    if (!videoLoaded) {\n      navigator.mediaDevices.getDisplayMedia({\n        video: {\n          width: 1280,\n          height: 720\n        },\n        audio: false\n      }).then(function (stream) {\n        video.srcObject = stream;\n        setVideoLoaded(true);\n        const settings = stream.getVideoTracks()[0].getSettings(); // console.log(settings);\n        // console.log('width' + stream.offsetWidth);\n\n        video.height = settings.height; // // resize video size\n\n        video.width = settings.width;\n        canvas.width = settings.width; // resize canvas size\n\n        canvas.height = settings.height; // console.log(video.height);\n\n        video.play(); // GetFrame();\n      }).catch(function (err) {\n        console.log(\"No choose shared window! \" + err);\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (cv) {\n      console.log(cv);\n      console.log(loaded);\n      console.log(\"count: \" + count);\n\n      if (video.srcObject != null) {\n        temCtx.drawImage(video, 0, 0);\n        img_previous.src = \"https://en.wikipedia.org/wiki/Chinese_University_of_Hong_Kong#/media/File:CUHK.svg\";\n        temCtx.drawImage(video, 0, 0);\n        img_now.src = temCanvas.toDataURL('image/png');\n        console.log(img_previous.src);\n        console.log(img_now.src);\n        console.log(img_previous.src === img_now.src);\n        if (img_previous.src !== img_now.src) img_previous.src = img_now.src; // setCount(count+1);\n\n        console.log(count);\n      }\n\n      const FPS = 30; // const processVideo = () =>{\n      //     if (video.srcObject!= null)\n      //     {\n      //         // console.log(video.srcObject);\n      //         let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n      //         let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n      //         let gray = new cv.Mat();\n      //         let cap = new cv.VideoCapture(video);\n      //         let faces = new cv.RectVector();\n      //         let classifier = new cv.CascadeClassifier();\n      //         let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\n      //         // let utils = new Utils(cv, 'errorMessage');\n      //         // utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n      //         //     classifier.load(faceCascadeFile); // in the callback, load the cascade from file \n      //         // });\n      //         console.log(classifier);\n      //         const detectFace = () => {\n      //             var begin = Date.now();\n      //             cap.read(src);\n      //             src.copyTo(dst);\n      //             cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\n      //             // try{\n      //             //     classifier.detectMultiScale(gray, faces, 1.1, 3, 0);\n      //             //     console.log(faces.size());\n      //             // }catch(err){\n      //             //     console.log(err);\n      //             // }\n      //             // for (let i = 0; i < faces.size(); ++i) {\n      //             //     let face = faces.get(i);\n      //             //     let point1 = new cv.Point(face.x, face.y);\n      //             //     let point2 = new cv.Point(face.x + face.width, face.y + face.height);\n      //             //     cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);\n      //             // }\n      //             cv.imshow(\"canvas\", dst);\n      //             // schedule next one.\n      //             let delay = 1000/FPS - (Date.now() - begin);\n      //             setTimeout(detectFace, delay);\n      //             console.log(\"detect\");\n      //         }\n      //         setTimeout(detectFace, 0);\n      //         setTimeout(() => { clearInterval(timer) }, 0);\n      //     }\n      //     // console.log(\"AAA\");\n      //     let timer = setTimeout(processVideo, 10);\n      //     console.log(\"delay\");\n      // }\n      // // schedule first one.\n      // setTimeout(processVideo, 0);\n    }\n  }, [cv, count, videoLoaded]); // const cv = useOpenCv()\n  // console.log(cv)\n  // const video = document.getElementById(\"video\");\n  // let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n  // let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n  // let gray = new cv.Mat();\n  // let cap = new cv.VideoCapture(video);\n  // let faces = new cv.RectVector();\n  // let classifier = new cv.CascadeClassifier();\n  // let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\n  // classifier.load(faceCascadeFile);\n  // console.log(classifier);\n  // function onOpenUtilsReady() {\n  //     let utils = new Utils('errorMessage');\n  //     utils.loadOpenCv(() => {\n  //     let faceCascadeFile = 'haarcascade_frontalface_default.xml';\n  //         utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n  //             document.getElementById('status').innerHTML = 'OpenCV.js is ready.';\n  //         });\n  //     });\n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"status\",\n      children: \"OpenCV.js is loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"videocontainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"video\", {\n          className: \"center\",\n          id: \"video\",\n          muted: true,\n          onClick: VideoUpload\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          className: \"center\",\n          id: \"temcanvas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"center\",\n          id: \"startMessage\",\n          children: /*#__PURE__*/_jsxDEV(\"svg\", {\n            xmlns: \"http://www.w3.org/2000/svg\",\n            width: \"120\",\n            height: \"120\",\n            viewBox: \"0 0 24 24\",\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 106\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"processcontainer\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          className: \"center\",\n          id: \"canvas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(MyComponent, \"h9ro0BHJdAOcVjzaOypUggy9LRU=\", false, function () {\n  return [useOpenCv];\n});\n\n_c = MyComponent;\nexport default MyComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyComponent\");","map":{"version":3,"sources":["/Users/yangxu/newapp/src/MyComponent.js"],"names":["useOpenCv","VideoCanvas","useEffect","useState","Utils","MyComponent","loaded","cv","video","document","getElementById","canvas","temCanvas","createElement","temCtx","getContext","img_previous","Image","img_now","count","setCount","videoLoaded","setVideoLoaded","VideoUpload","navigator","mediaDevices","getDisplayMedia","width","height","audio","then","stream","srcObject","settings","getVideoTracks","getSettings","play","catch","err","console","log","drawImage","src","toDataURL","FPS"],"mappings":"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","sourcesContent":["import { useOpenCv } from 'opencv-react'\nimport VideoCanvas from './VideoCanvas';\nimport {useEffect, useState} from 'react'\nimport Utils from './utils'\n\nfunction MyComponent() {\n    const { loaded, cv } = useOpenCv();\n    const video = document.getElementById(\"video\");\n    const canvas = document.getElementById(\"canvas\");\n    var temCanvas = document.createElement('canvas');\n    const temCtx = temCanvas.getContext(\"2d\");\n    const img_previous = new Image();\n    const img_now = new Image();\n    // if (video.srcObject!= null)\n    // temCtx.drawImage(video, 0, 0);\n\n    const [count, setCount] = useState(0);\n    const [videoLoaded, setVideoLoaded] = useState(false);\n\n    const VideoUpload = () =>{\n        \n        if (!videoLoaded) {\n            navigator.mediaDevices.getDisplayMedia({ video: { width: 1280, height: 720 }, audio: false })\n            .then(function(stream) {\n                video.srcObject = stream;\n                setVideoLoaded(true);\n\n                const settings = stream.getVideoTracks()[0].getSettings();\n                // console.log(settings);\n                // console.log('width' + stream.offsetWidth);\n\n                video.height = settings.height; // // resize video size\n                video.width = settings.width;\n                canvas.width = settings.width; // resize canvas size\n                canvas.height = settings.height;\n                // console.log(video.height);\n                video.play();\n                // GetFrame();\n                \n            })\n            .catch(function(err) {\n                console.log(\"No choose shared window! \" + err);\n            });\n            \n        }\n    }\n    \n    \n    \n\n    useEffect(() => {\n        if (cv) {\n            console.log(cv);\n            console.log(loaded);\n            console.log(\"count: \"+ count);\n            \n            if (video.srcObject!= null){\n                temCtx.drawImage(video, 0, 0);\n                img_previous.src = \"https://en.wikipedia.org/wiki/Chinese_University_of_Hong_Kong#/media/File:CUHK.svg\";\n                temCtx.drawImage(video, 0, 0);\n                img_now.src = temCanvas.toDataURL('image/png');\n                console.log(img_previous.src);\n                console.log(img_now.src);\n                console.log(img_previous.src===img_now.src)\n                if (img_previous.src !== img_now.src)\n                    img_previous.src = img_now.src;\n                    // setCount(count+1);\n                console.log(count);\n            }\n\n            const FPS = 30;\n\n            // const processVideo = () =>{\n                \n            //     if (video.srcObject!= null)\n            //     {\n            //         // console.log(video.srcObject);\n            //         let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n            //         let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n            //         let gray = new cv.Mat();\n            //         let cap = new cv.VideoCapture(video);\n            //         let faces = new cv.RectVector();\n            //         let classifier = new cv.CascadeClassifier();\n            //         let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\n            //         // let utils = new Utils(cv, 'errorMessage');\n            //         // utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n            //         //     classifier.load(faceCascadeFile); // in the callback, load the cascade from file \n            //         // });\n            //         console.log(classifier);\n                    \n            //         const detectFace = () => {\n            //             var begin = Date.now();\n            //             cap.read(src);\n            //             src.copyTo(dst);\n            //             cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\n            //             // try{\n            //             //     classifier.detectMultiScale(gray, faces, 1.1, 3, 0);\n            //             //     console.log(faces.size());\n            //             // }catch(err){\n            //             //     console.log(err);\n            //             // }\n            //             // for (let i = 0; i < faces.size(); ++i) {\n            //             //     let face = faces.get(i);\n            //             //     let point1 = new cv.Point(face.x, face.y);\n            //             //     let point2 = new cv.Point(face.x + face.width, face.y + face.height);\n            //             //     cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);\n            //             // }\n            //             cv.imshow(\"canvas\", dst);\n                        \n                        \n            //             // schedule next one.\n            //             let delay = 1000/FPS - (Date.now() - begin);\n            //             setTimeout(detectFace, delay);\n            //             console.log(\"detect\");\n            //         }\n            //         setTimeout(detectFace, 0);\n            //         setTimeout(() => { clearInterval(timer) }, 0);\n            //     }\n            //     // console.log(\"AAA\");\n            //     let timer = setTimeout(processVideo, 10);\n            //     console.log(\"delay\");\n                \n            // }\n            // // schedule first one.\n            // setTimeout(processVideo, 0);\n\n        }\n    }, [cv, count, videoLoaded])\n\n    // const cv = useOpenCv()\n    // console.log(cv)\n\n    // const video = document.getElementById(\"video\");\n    // let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n    // let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n    // let gray = new cv.Mat();\n    // let cap = new cv.VideoCapture(video);\n    // let faces = new cv.RectVector();\n    // let classifier = new cv.CascadeClassifier();\n\n    // let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\n    // classifier.load(faceCascadeFile);\n    // console.log(classifier);\n\n    // function onOpenUtilsReady() {\n    //     let utils = new Utils('errorMessage');\n    //     utils.loadOpenCv(() => {\n    //     let faceCascadeFile = 'haarcascade_frontalface_default.xml';\n    //         utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n    //             document.getElementById('status').innerHTML = 'OpenCV.js is ready.';\n    //         });\n    //     });\n    // }\n\n    return (\n        <>\n        <p id=\"status\">OpenCV.js is loading...</p>\n        <div>\n            <div id=\"videocontainer\">\n                <video className=\"center\" id=\"video\" muted onClick={VideoUpload}></video>\n                <canvas className=\"center\" id=\"temcanvas\" ></canvas>\n                <div className=\"center\" id=\"startMessage\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"120\" height=\"120\" viewBox=\"0 0 24 24\"><path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\"/></svg>\n                </div>\n            </div>\n            <br />\n            <div id=\"processcontainer\" >\n                {/* <OpenCvProvider onLoad={onLoaded} openCvPath='/opencv/opencv.js'> */}\n                    <canvas className=\"center\" id=\"canvas\"></canvas>\n                {/* </OpenCvProvider> */}\n            </div>\n        </div>\n        {/* <script async src=\"./utils.js\" onLoad={onOpenUtilsReady} type=\"text/javascript\"></script> */}\n        </>\n        \n    )\n}\n\n\n\nexport default MyComponent;\n\n\n"]},"metadata":{},"sourceType":"module"}