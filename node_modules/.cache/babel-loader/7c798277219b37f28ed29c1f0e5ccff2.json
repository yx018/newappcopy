{"ast":null,"code":"import { OpenCvProvider, useOpenCv } from 'opencv-react';\nimport { React, useCallback, useEffect } from 'react';\n\nfunction Utils(cv) {\n  // const { loaded, cv } = useOpenCv();\n  // useEffect(() => {\n  //     if (cv) {\n  //         console.log('utils useEffect', cv);\n  //     }\n  // }, [cv])\n  console.log('utils:', cv);\n  let self = this;\n\n  this.createFileFromUrl = async function (path, url, callback) {\n    let request = new XMLHttpRequest();\n    request.open('GET', url, true);\n    request.responseType = 'arraybuffer';\n\n    request.onload = function (ev) {\n      if (request.readyState === 4) {\n        if (request.status === 200) {\n          let data = new Uint8Array(request.response);\n          cv.FS_createDataFile('/', path, data, true, false, false);\n          callback();\n          console.log(action);\n        } else {\n          self.printError('Failed to load ' + url + ' status: ' + request.status);\n          return;\n        }\n      }\n    };\n\n    request.send();\n  };\n\n  const OPENCV_URL = './opencv/opencv.js';\n\n  this.loadOpenCv = function (onloadCallback) {\n    let script = document.createElement('script');\n    script.setAttribute('async', '');\n    script.setAttribute('type', 'text/javascript');\n    script.addEventListener('load', async () => {\n      if (cv.getBuildInformation) {\n        console.log(cv.getBuildInformation());\n        onloadCallback();\n      } else {\n        // WASM\n        if (cv instanceof Promise) {\n          cv = await cv;\n          console.log(cv.getBuildInformation());\n          onloadCallback();\n        } else {\n          cv['onRuntimeInitialized'] = () => {\n            console.log(cv.getBuildInformation());\n            onloadCallback();\n          };\n        }\n      }\n    });\n    script.addEventListener('error', () => {\n      self.printError('Failed to load ' + OPENCV_URL);\n    });\n    script.src = OPENCV_URL;\n    let node = document.getElementsByTagName('script')[0];\n    node.parentNode.insertBefore(script, node);\n  };\n}\n\n_c = Utils;\nexport default Utils;\n\nvar _c;\n\n$RefreshReg$(_c, \"Utils\");","map":{"version":3,"sources":["/Users/yangxu/newappcopy/src/Utils.js"],"names":["OpenCvProvider","useOpenCv","React","useCallback","useEffect","Utils","cv","console","log","self","createFileFromUrl","path","url","callback","request","XMLHttpRequest","open","responseType","onload","ev","readyState","status","data","Uint8Array","response","FS_createDataFile","action","printError","send","OPENCV_URL","loadOpenCv","onloadCallback","script","document","createElement","setAttribute","addEventListener","getBuildInformation","Promise","src","node","getElementsByTagName","parentNode","insertBefore"],"mappings":"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","sourcesContent":["import { OpenCvProvider, useOpenCv } from 'opencv-react'\nimport {React, useCallback, useEffect} from 'react'\n\nfunction Utils(cv) {\n\n    // const { loaded, cv } = useOpenCv();\n\n    // useEffect(() => {\n    //     if (cv) {\n    //         console.log('utils useEffect', cv);\n    //     }\n    // }, [cv])\n\n    console.log('utils:', cv);\n\n    let self = this;\n    this.createFileFromUrl = async function(path, url, callback) {\n        let request = new XMLHttpRequest();\n        request.open('GET', url, true);\n        request.responseType = 'arraybuffer';\n        request.onload = function(ev) {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    let data = new Uint8Array(request.response);\n                    cv.FS_createDataFile('/', path, data, true, false, false);\n                    callback();\n                    console.log(action);\n\n                } \n                else {\n                    self.printError('Failed to load ' + url + ' status: ' + request.status);\n                    return;\n                }\n            }\n        };\n        request.send();\n    };\n\n    const OPENCV_URL = './opencv/opencv.js';\n    this.loadOpenCv = function(onloadCallback) {\n        let script = document.createElement('script');\n        script.setAttribute('async', '');\n        script.setAttribute('type', 'text/javascript');\n        script.addEventListener('load', async () => {\n            if (cv.getBuildInformation)\n            {\n                console.log(cv.getBuildInformation());\n                onloadCallback();\n            }\n            else\n            {\n                // WASM\n                if (cv instanceof Promise) {\n                    cv = await cv;\n                    console.log(cv.getBuildInformation());\n                    onloadCallback();\n                } else {\n                    cv['onRuntimeInitialized']=()=>{\n                        console.log(cv.getBuildInformation()); \n                        onloadCallback();\n                    }\n                }\n            }\n        });\n        script.addEventListener('error', () => {\n            self.printError('Failed to load ' + OPENCV_URL);\n        });\n        script.src = OPENCV_URL;\n        let node = document.getElementsByTagName('script')[0];\n        node.parentNode.insertBefore(script, node);\n    };\n}\n\nexport default Utils;"]},"metadata":{},"sourceType":"module"}