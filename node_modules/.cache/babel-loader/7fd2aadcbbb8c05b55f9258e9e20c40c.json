{"ast":null,"code":"var _jsxFileName = \"/Users/yangxu/newapp/src/MyComponent.js\",\n    _s = $RefreshSig$();\n\nimport { OpenCvProvider, useOpenCv } from 'opencv-react';\nimport VideoCanvas from './VideoCanvas';\nimport { useEffect, useState } from 'react';\nimport Utils from './utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction MyComponent() {\n  _s();\n\n  const {\n    loaded,\n    cv\n  } = useOpenCv();\n  let add_button = document.getElementById(\"add\");\n  let zoom_window_text = document.getElementById(\"zoom_window_text\");\n  let process_window_text = document.getElementById(\"process_window_text\");\n  let video = document.getElementById(\"cam_input\");\n  let output = document.getElementById(\"canvas_output\");\n  let utils = new Utils(); // const img_now = new Image();\n  // let utils = new Utils();\n  // if (video.srcObject!= null)\n  // temCtx.drawImage(video, 0, 0);\n\n  const [count, setCount] = useState(0);\n  const [videoLoaded, setVideoLoaded] = useState(false);\n\n  const catchZoomWindow = () => {\n    navigator.mediaDevices.getDisplayMedia({\n      video: true,\n      audio: false\n    }).then(function (stream) {\n      video.srcObject = stream;\n      let settings = stream.getVideoTracks()[0].getSettings();\n      console.log(settings);\n      add_button.style.display = \"none\";\n      zoom_window_text.style.display = \"none\";\n      process_window_text.style.display = \"none\"; // FPS = settings.frameRate;\n\n      output.style.width = video.style.width;\n      output.style.height = video.style.height; // video.play();\n    }).then(() => {\n      console.log('component catch', cv);\n      console.log(OpenCvProvider.onLoaded);\n    }).then(() => {\n      // openCvReady();\n      utils.loadOpenCv(openCvReady);\n    }).catch(err => {\n      console.log(\"An error occurred! \" + err);\n    });\n  };\n\n  useEffect(() => {\n    if (cv) {\n      console.log(cv); // console.log(loaded);\n\n      console.log(\"count: \" + count);\n\n      if (video.srcObject != null) {\n        let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n        let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n        let gray = new cv.Mat();\n        let cap = new cv.VideoCapture(video);\n        let faces = new cv.RectVector();\n        let classifier = new cv.CascadeClassifier();\n        let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\n        // let utils = new Utils();\n        // utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n        //     classifier.load(faceCascadeFile); // in the callback, load the cascade from file \n        // });\n\n        console.log(classifier);\n        var begin = Date.now();\n        cap.read(src);\n        src.copyTo(dst);\n        cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0); // try{\n        //     classifier.detectMultiScale(gray, faces, 1.1, 3, 0);\n        //     console.log(faces.size());\n        // }catch(err){\n        //     console.log(err);\n        // }\n        // for (let i = 0; i < faces.size(); ++i) {\n        //     let face = faces.get(i);\n        //     let point1 = new cv.Point(face.x, face.y);\n        //     let point2 = new cv.Point(face.x + face.width, face.y + face.height);\n        //     cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);\n        // }\n\n        cv.imshow(\"canvas\", dst); // img_now.src = temCanvas.toDataURL('image/jpg');\n        // console.log(img_previous.src);\n        // console.log(img_now.src);\n        // console.log(img_previous  === img_now.src)\n        // if (img_previous.src != img_now.src){\n        //     img_previous.src = img_now.src;\n        //     console.log(\"AAA\");\n        //     // setCount(count+1);\n        // }\n      }\n\n      const FPS = 30; // const processVideo = () =>{\n      //     if (video.srcObject!= null)\n      //     {\n      //         // console.log(video.srcObject);\n      //         let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n      //         let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n      //         let gray = new cv.Mat();\n      //         let cap = new cv.VideoCapture(video);\n      //         let faces = new cv.RectVector();\n      //         let classifier = new cv.CascadeClassifier();\n      //         let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\n      //         // let utils = new Utils(cv, 'errorMessage');\n      //         // utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n      //         //     classifier.load(faceCascadeFile); // in the callback, load the cascade from file \n      //         // });\n      //         console.log(classifier);\n      //         const detectFace = () => {\n      //             var begin = Date.now();\n      //             cap.read(src);\n      //             src.copyTo(dst);\n      //             cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\n      //             // try{\n      //             //     classifier.detectMultiScale(gray, faces, 1.1, 3, 0);\n      //             //     console.log(faces.size());\n      //             // }catch(err){\n      //             //     console.log(err);\n      //             // }\n      //             // for (let i = 0; i < faces.size(); ++i) {\n      //             //     let face = faces.get(i);\n      //             //     let point1 = new cv.Point(face.x, face.y);\n      //             //     let point2 = new cv.Point(face.x + face.width, face.y + face.height);\n      //             //     cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);\n      //             // }\n      //             cv.imshow(\"canvas\", dst);\n      //             // schedule next one.\n      //             let delay = 1000/FPS - (Date.now() - begin);\n      //             setTimeout(detectFace, delay);\n      //             console.log(\"detect\");\n      //         }\n      //         setTimeout(detectFace, 0);\n      //         setTimeout(() => { clearInterval(timer) }, 0);\n      //     }\n      //     // console.log(\"AAA\");\n      //     let timer = setTimeout(processVideo, 10);\n      //     console.log(\"delay\");\n      // }\n      // // schedule first one.\n      // setTimeout(processVideo, 0);\n    }\n  }, [cv, video, count, videoLoaded]); // const cv = useOpenCv()\n  // console.log(cv)\n  // const video = document.getElementById(\"video\");\n  // let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n  // let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n  // let gray = new cv.Mat();\n  // let cap = new cv.VideoCapture(video);\n  // let faces = new cv.RectVector();\n  // let classifier = new cv.CascadeClassifier();\n  // let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\n  // classifier.load(faceCascadeFile);\n  // console.log(classifier);\n  // function onOpenUtilsReady() {\n  //     let utils = new Utils('errorMessage');\n  //     utils.loadOpenCv(() => {\n  //     let faceCascadeFile = 'haarcascade_frontalface_default.xml';\n  //         utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n  //             document.getElementById('status').innerHTML = 'OpenCV.js is ready.';\n  //         });\n  //     });\n  // }\n\n  const onLoaded = cv => {\n    console.log('opencv loaded, cv');\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"status\",\n      children: \"OpenCV.js is loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        id: \"title\",\n        children: \"iExam\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n        id: \"tip\",\n        children: \"Please click add button to import the Zoom stream. Then you can scroll down to the iExam window.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"zoom_window_text\",\n        children: \"Zoom window\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        id: \"cam_input\",\n        width: \"1200\",\n        height: \"690\",\n        autoPlay: true,\n        muted: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        id: \"add\",\n        onClick: catchZoomWindow,\n        width: \"120\",\n        height: \"120\",\n        viewBox: \"0 0 24 24\",\n        children: /*#__PURE__*/_jsxDEV(\"path\", {\n          d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 133\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"process_window_text\",\n        children: \"iExam window\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"canvas_output\",\n        width: \"1200\",\n        height: \"690\",\n        children: \"This box is for capturing student face\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"footer\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Details for iExam please refer to slides: \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://daoyuan14.github.io/slides/Expo21_iExam.pdf\",\n          target: \"_blank\",\n          children: \"https://daoyuan14.github.io/slides/Expo21_iExam.pdf\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 58\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Post-exam recording analysis for desktop version, please view: \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://github.com/VPRLab/iExam/tree/test\",\n          target: \"_blank\",\n          children: \"https://github.com/VPRLab/iExam/tree/test \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 79\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n} // function openCvReady() {\n//     console.log(cv);\n//     let FPS = 30;\n//     let video = document.getElementById(\"cam_input\");\n//     let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n//     let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n//     let gray = new cv.Mat();\n//     let cap = new cv.VideoCapture(cam_input);\n//     let faces = new cv.RectVector();\n//     let classifier = new cv.CascadeClassifier();\n//     let minsize = new cv.Size(0, 0);\n//     let maxsize = new cv.Size(1000, 1000);\n//     let faceCascadeFile = 'haarcascade_frontalface_default.xml';\n//     utils.createFileFromUrl(faceCascadeFile, '../haarcascades/'+faceCascadeFile, () => {\n//         classifier.load(faceCascadeFile); // in the callback, load the cascade from file \n//     });\n//     let face_row = -1;\n//     let face_col = -1;\n//     let clip_width = video.width/5;\n//     let clip_height = video.height/5;\n//     function processVideo() {\n//         let begin = Date.now();\n//         if (video.srcObject!=null){\n//             cap.read(src);\n//             src.copyTo(dst);\n//             cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\n//             try{\n//                 classifier.detectMultiScale(gray, faces, 1.1, 3);\n//                 console.log(\"face size: \"+ faces.size());\n//             }catch(err){\n//                 console.log(err);\n//             }\n//             for (let i = 0; i < faces.size(); ++i) {\n//                 let face = faces.get(i);\n//                 // console.log(face);\n//                 let face_row = parseInt(face.y/clip_height);\n//                 let face_col = parseInt(face.x/clip_width);\n//                 let tmp_row = parseInt((face.y+face.height-5) / clip_height);\n//                 let tmp_col = parseInt((face.x+face.width-5) / clip_width);\n//                 // console.log([face_row, face_col, tmp_row, tmp_col]);\n//                 if (face.width>=clip_width || face.height>=clip_height || tmp_row!=face_row || tmp_col!=face_col)\n//                     continue;\n//                 let point1 = new cv.Point(face.x, face.y);\n//                 let point2 = new cv.Point(face.x + face.width, face.y + face.height);\n//                 cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);\n//             }\n//             cv.imshow(\"canvas_output\", dst);\n//         }\n//         // schedule next one.\n//         let delay = 1000/FPS - (Date.now() - begin);\n//         setTimeout(processVideo, delay);\n//     }\n//     // schedule first one.\n//     setTimeout(processVideo, 0); \n// }\n// function Utils() {\n//     let self = this;\n//     this.createFileFromUrl = function(path, url, callback) {\n//         console.log(cv);\n//         let request = new XMLHttpRequest();\n//         request.open('GET', url, true);\n//         request.responseType = 'arraybuffer';\n//         request.onload = function(ev) {\n//             if (request.readyState === 4) {\n//                 if (request.status === 200) {\n//                     let data = new Uint8Array(request.response);\n//                     cv.FS_createDataFile('/', path, data, true, false, false);\n//                     callback();\n//                 } else {\n//                     self.printError('Failed to load ' + url + ' status: ' + request.status);\n//                 }\n//             }\n//         };\n//         request.send();\n//     };\n//     const OPENCV_URL = './opencv/opencv.js';\n//     this.loadOpenCv = function(onloadCallback) {\n//         let script = document.createElement('script');\n//         script.setAttribute('async', '');\n//         script.setAttribute('type', 'text/javascript');\n//         script.addEventListener('load', async () => {\n//             if (cv.getBuildInformation)\n//             {\n//                 console.log(cv.getBuildInformation());\n//                 onloadCallback();\n//             }\n//             else\n//             {\n//                 // WASM\n//                 if (cv instanceof Promise) {\n//                     cv = await cv;\n//                     console.log(cv.getBuildInformation());\n//                     onloadCallback();\n//                 } else {\n//                     cv['onRuntimeInitialized']=()=>{  //satisfy this condition\n//                         console.log(cv.getBuildInformation()); \n//                         onloadCallback();\n//                     }\n//                 }\n//             }\n//         });\n//         script.addEventListener('error', () => {\n//             self.printError('Failed to load ' + OPENCV_URL);\n//         });\n//         script.src = OPENCV_URL;\n//         let node = document.getElementsByTagName('script')[0];\n//         node.parentNode.insertBefore(script, node);\n//     };\n// }\n\n\n_s(MyComponent, \"h9ro0BHJdAOcVjzaOypUggy9LRU=\", false, function () {\n  return [useOpenCv];\n});\n\n_c = MyComponent;\nexport default MyComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyComponent\");","map":{"version":3,"sources":["/Users/yangxu/newapp/src/MyComponent.js"],"names":["OpenCvProvider","useOpenCv","VideoCanvas","useEffect","useState","Utils","MyComponent","loaded","cv","add_button","document","getElementById","zoom_window_text","process_window_text","video","output","utils","count","setCount","videoLoaded","setVideoLoaded","catchZoomWindow","navigator","mediaDevices","getDisplayMedia","audio","then","stream","srcObject","settings","getVideoTracks","getSettings","console","log","style","display","width","height","onLoaded","loadOpenCv","openCvReady","catch","err","src","Mat","CV_8UC4","dst","CV_8UC1","gray","cap","VideoCapture","faces","RectVector","classifier","CascadeClassifier","faceCascadeFile","begin","Date","now","read","copyTo","cvtColor","COLOR_RGBA2GRAY","imshow","FPS"],"mappings":"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","sourcesContent":["import { OpenCvProvider, useOpenCv } from 'opencv-react'\nimport VideoCanvas from './VideoCanvas';\nimport {useEffect, useState} from 'react'\nimport Utils from './utils';\n\nfunction MyComponent() {\n\n    const { loaded, cv } = useOpenCv();\n\n    let add_button = document.getElementById(\"add\");\n    let zoom_window_text = document.getElementById(\"zoom_window_text\");\n    let process_window_text = document.getElementById(\"process_window_text\");\n    let video = document.getElementById(\"cam_input\");\n    let output = document.getElementById(\"canvas_output\");\n    \n    let utils = new Utils();\n\n    // const img_now = new Image();\n    // let utils = new Utils();\n    // if (video.srcObject!= null)\n    // temCtx.drawImage(video, 0, 0);\n\n    const [count, setCount] = useState(0);\n    const [videoLoaded, setVideoLoaded] = useState(false);\n\n    const catchZoomWindow = () => {\n        navigator.mediaDevices.getDisplayMedia({ video: true, audio: false })\n        .then(function(stream) {\n        video.srcObject = stream;\n        let settings = stream.getVideoTracks()[0].getSettings();\n        console.log(settings);\n        add_button.style.display = \"none\";\n        zoom_window_text.style.display = \"none\";\n        process_window_text.style.display = \"none\";\n        // FPS = settings.frameRate;\n        output.style.width = video.style.width;\n        output.style.height = video.style.height;\n        // video.play();\n        })\n        .then(()=>{\n            console.log('component catch', cv);\n            console.log(OpenCvProvider.onLoaded);\n\n        })\n        .then(()=> {\n            // openCvReady();\n            utils.loadOpenCv(openCvReady);\n            \n        })\n        .catch((err) =>{\n            console.log(\"An error occurred! \" + err);\n        });\n\n    }\n\n    \n\n    \n    \n    useEffect(() => {\n        if (cv) {\n            console.log(cv);\n            // console.log(loaded);\n            console.log(\"count: \"+ count);\n            \n            if (video.srcObject!= null){\n\n                let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n                let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n                let gray = new cv.Mat();\n                let cap = new cv.VideoCapture(video);\n                let faces = new cv.RectVector();\n                let classifier = new cv.CascadeClassifier();\n                let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\n                // let utils = new Utils();\n                // utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n                //     classifier.load(faceCascadeFile); // in the callback, load the cascade from file \n                // });\n                console.log(classifier);\n                \n                \n                var begin = Date.now();\n                cap.read(src);\n                src.copyTo(dst);\n                cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\n                // try{\n                //     classifier.detectMultiScale(gray, faces, 1.1, 3, 0);\n                //     console.log(faces.size());\n                // }catch(err){\n                //     console.log(err);\n                // }\n                // for (let i = 0; i < faces.size(); ++i) {\n                //     let face = faces.get(i);\n                //     let point1 = new cv.Point(face.x, face.y);\n                //     let point2 = new cv.Point(face.x + face.width, face.y + face.height);\n                //     cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);\n                // }\n                cv.imshow(\"canvas\", dst);\n                \n                // img_now.src = temCanvas.toDataURL('image/jpg');\n                // console.log(img_previous.src);\n                // console.log(img_now.src);\n                // console.log(img_previous  === img_now.src)\n                // if (img_previous.src != img_now.src){\n                //     img_previous.src = img_now.src;\n                //     console.log(\"AAA\");\n                //     // setCount(count+1);\n                // }\n            }\n\n            const FPS = 30;\n\n            // const processVideo = () =>{\n                \n            //     if (video.srcObject!= null)\n            //     {\n            //         // console.log(video.srcObject);\n            //         let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n            //         let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n            //         let gray = new cv.Mat();\n            //         let cap = new cv.VideoCapture(video);\n            //         let faces = new cv.RectVector();\n            //         let classifier = new cv.CascadeClassifier();\n            //         let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\n            //         // let utils = new Utils(cv, 'errorMessage');\n            //         // utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n            //         //     classifier.load(faceCascadeFile); // in the callback, load the cascade from file \n            //         // });\n            //         console.log(classifier);\n                    \n            //         const detectFace = () => {\n            //             var begin = Date.now();\n            //             cap.read(src);\n            //             src.copyTo(dst);\n            //             cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\n            //             // try{\n            //             //     classifier.detectMultiScale(gray, faces, 1.1, 3, 0);\n            //             //     console.log(faces.size());\n            //             // }catch(err){\n            //             //     console.log(err);\n            //             // }\n            //             // for (let i = 0; i < faces.size(); ++i) {\n            //             //     let face = faces.get(i);\n            //             //     let point1 = new cv.Point(face.x, face.y);\n            //             //     let point2 = new cv.Point(face.x + face.width, face.y + face.height);\n            //             //     cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);\n            //             // }\n            //             cv.imshow(\"canvas\", dst);\n                        \n                        \n            //             // schedule next one.\n            //             let delay = 1000/FPS - (Date.now() - begin);\n            //             setTimeout(detectFace, delay);\n            //             console.log(\"detect\");\n            //         }\n            //         setTimeout(detectFace, 0);\n            //         setTimeout(() => { clearInterval(timer) }, 0);\n            //     }\n            //     // console.log(\"AAA\");\n            //     let timer = setTimeout(processVideo, 10);\n            //     console.log(\"delay\");\n                \n            // }\n            // // schedule first one.\n            // setTimeout(processVideo, 0);\n\n        }\n    }, [cv, video,count, videoLoaded])\n\n    // const cv = useOpenCv()\n    // console.log(cv)\n\n    // const video = document.getElementById(\"video\");\n    // let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n    // let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n    // let gray = new cv.Mat();\n    // let cap = new cv.VideoCapture(video);\n    // let faces = new cv.RectVector();\n    // let classifier = new cv.CascadeClassifier();\n\n    // let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\n    // classifier.load(faceCascadeFile);\n    // console.log(classifier);\n\n    // function onOpenUtilsReady() {\n    //     let utils = new Utils('errorMessage');\n    //     utils.loadOpenCv(() => {\n    //     let faceCascadeFile = 'haarcascade_frontalface_default.xml';\n    //         utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n    //             document.getElementById('status').innerHTML = 'OpenCV.js is ready.';\n    //         });\n    //     });\n    // }\n\n    const onLoaded = (cv) => {\n        console.log('opencv loaded, cv')\n    }\n\n    return (\n        <>\n        \n        <p id=\"status\">OpenCV.js is loading...</p>\n        <div className=\"container\">\n            <h2 id=\"title\">iExam</h2>\n            <h6 id=\"tip\">Please click add button to import the Zoom stream. Then you can scroll down to the iExam window.</h6>\n            <p id=\"zoom_window_text\">Zoom window</p>\n            <video id=\"cam_input\" width=\"1200\" height=\"690\" autoPlay muted></video>\n            {/* <img id=\"add\" src=\"add.svg\" alt=\"upload video window\" width=\"128\" height=\"128\" /> */}\n            <svg xmlns=\"http://www.w3.org/2000/svg\" id=\"add\" onClick={catchZoomWindow} width=\"120\" height=\"120\" viewBox=\"0 0 24 24\"><path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\"/></svg>\n            <p id=\"process_window_text\">iExam window</p>\n            <canvas id=\"canvas_output\" width=\"1200\" height=\"690\">This box is for capturing student face</canvas>\n        </div>\n        <div className=\"footer\">\n            <p>Details for iExam please refer to slides: <a href=\"https://daoyuan14.github.io/slides/Expo21_iExam.pdf\" target=\"_blank\">https://daoyuan14.github.io/slides/Expo21_iExam.pdf</a></p>\n            <p>Post-exam recording analysis for desktop version, please view: <a href=\"https://github.com/VPRLab/iExam/tree/test\" target=\"_blank\">https://github.com/VPRLab/iExam/tree/test </a></p>\n            {/* <p id=\"author\">Author: YANG Xu, Supervisor: WU Daoyuan (VPRLab)</p>\n            <p>Last Modified: Mon Oct 25 2021 23:12:29 GMT+0800 (Hong Kong Standard Time)</p> */}\n        </div>\n        </>\n        \n    )\n}\n\n// function openCvReady() {\n//     console.log(cv);\n//     let FPS = 30;\n//     let video = document.getElementById(\"cam_input\");\n//     let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n//     let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n//     let gray = new cv.Mat();\n//     let cap = new cv.VideoCapture(cam_input);\n//     let faces = new cv.RectVector();\n//     let classifier = new cv.CascadeClassifier();\n//     let minsize = new cv.Size(0, 0);\n//     let maxsize = new cv.Size(1000, 1000);\n//     let faceCascadeFile = 'haarcascade_frontalface_default.xml';\n//     utils.createFileFromUrl(faceCascadeFile, '../haarcascades/'+faceCascadeFile, () => {\n//         classifier.load(faceCascadeFile); // in the callback, load the cascade from file \n//     });\n//     let face_row = -1;\n//     let face_col = -1;\n//     let clip_width = video.width/5;\n//     let clip_height = video.height/5;\n//     function processVideo() {\n//         let begin = Date.now();\n//         if (video.srcObject!=null){\n//             cap.read(src);\n//             src.copyTo(dst);\n//             cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\n//             try{\n//                 classifier.detectMultiScale(gray, faces, 1.1, 3);\n//                 console.log(\"face size: \"+ faces.size());\n//             }catch(err){\n//                 console.log(err);\n//             }\n//             for (let i = 0; i < faces.size(); ++i) {\n//                 let face = faces.get(i);\n//                 // console.log(face);\n//                 let face_row = parseInt(face.y/clip_height);\n//                 let face_col = parseInt(face.x/clip_width);\n\n//                 let tmp_row = parseInt((face.y+face.height-5) / clip_height);\n//                 let tmp_col = parseInt((face.x+face.width-5) / clip_width);\n//                 // console.log([face_row, face_col, tmp_row, tmp_col]);\n//                 if (face.width>=clip_width || face.height>=clip_height || tmp_row!=face_row || tmp_col!=face_col)\n//                     continue;\n\n//                 let point1 = new cv.Point(face.x, face.y);\n//                 let point2 = new cv.Point(face.x + face.width, face.y + face.height);\n//                 cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);\n//             }\n//             cv.imshow(\"canvas_output\", dst);\n//         }\n//         // schedule next one.\n//         let delay = 1000/FPS - (Date.now() - begin);\n//         setTimeout(processVideo, delay);\n//     }\n//     // schedule first one.\n//     setTimeout(processVideo, 0); \n// }\n\n// function Utils() {\n//     let self = this;\n//     this.createFileFromUrl = function(path, url, callback) {\n//         console.log(cv);\n//         let request = new XMLHttpRequest();\n//         request.open('GET', url, true);\n//         request.responseType = 'arraybuffer';\n//         request.onload = function(ev) {\n//             if (request.readyState === 4) {\n//                 if (request.status === 200) {\n//                     let data = new Uint8Array(request.response);\n//                     cv.FS_createDataFile('/', path, data, true, false, false);\n//                     callback();\n//                 } else {\n//                     self.printError('Failed to load ' + url + ' status: ' + request.status);\n//                 }\n//             }\n//         };\n//         request.send();\n        \n//     };\n\n//     const OPENCV_URL = './opencv/opencv.js';\n//     this.loadOpenCv = function(onloadCallback) {\n//         let script = document.createElement('script');\n//         script.setAttribute('async', '');\n//         script.setAttribute('type', 'text/javascript');\n//         script.addEventListener('load', async () => {\n//             if (cv.getBuildInformation)\n//             {\n//                 console.log(cv.getBuildInformation());\n//                 onloadCallback();\n//             }\n//             else\n//             {\n//                 // WASM\n//                 if (cv instanceof Promise) {\n//                     cv = await cv;\n//                     console.log(cv.getBuildInformation());\n//                     onloadCallback();\n//                 } else {\n//                     cv['onRuntimeInitialized']=()=>{  //satisfy this condition\n//                         console.log(cv.getBuildInformation()); \n//                         onloadCallback();\n//                     }\n//                 }\n//             }\n//         });\n//         script.addEventListener('error', () => {\n//             self.printError('Failed to load ' + OPENCV_URL);\n//         });\n//         script.src = OPENCV_URL;\n//         let node = document.getElementsByTagName('script')[0];\n//         node.parentNode.insertBefore(script, node);\n//     };\n// }\n\n\n\nexport default MyComponent;\n\n\n"]},"metadata":{},"sourceType":"module"}