{"ast":null,"code":"var _jsxFileName = \"/Users/yangxu/newapp/src/DetectCanvas.js\",\n    _s = $RefreshSig$();\n\nimport { OpenCvProvider, useOpenCv } from 'opencv-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DetectCanvas = () => {\n  _s();\n\n  const canvas = document.getElementById(\"canvas\");\n  const video = document.getElementById(\"video\");\n  const data = useOpenCv();\n  console.log(data);\n\n  const onLoaded = cv => {\n    console.log('opencv loaded, cv');\n    console.log(cv);\n    console.log(canvas);\n    let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n    let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n    let gray = new cv.Mat();\n    let cap = new cv.VideoCapture(video);\n    let faces = new cv.RectVector();\n    let classifier = new cv.CascadeClassifier();\n    let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\n\n    classifier.load(faceCascadeFile);\n    console.log(classifier);\n\n    const processVideo = () => {\n      // GetFrame();\n      console.log(src);\n\n      if (src != null) {\n        cap.read(src);\n        src.copyTo(dst);\n        cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\n\n        try {\n          classifier.detectMultiScale(gray, faces, 1.1, 3, 0);\n          console.log(faces.size());\n        } catch (err) {\n          console.log(err);\n        }\n\n        for (let i = 0; i < faces.size(); ++i) {\n          let face = faces.get(i);\n          let point1 = new cv.Point(face.x, face.y);\n          let point2 = new cv.Point(face.x + face.width, face.y + face.height);\n          cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);\n        } // cv.imshow(\"canvas\", dst);\n        // // schedule next one.\n        // let delay = 1000/FPS - (Date.now() - begin);\n        // setTimeout(processVideo, delay);\n\n      }\n    }; // // schedule first one.\n    // setTimeout(processVideo, 0);\n\n  };\n\n  return /*#__PURE__*/_jsxDEV(OpenCvProvider, {\n    onLoad: onLoaded,\n    openCvPath: \"/opencv/opencv.js\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DetectCanvas, \"6KUEZLtt+QNPcVzdLT5PhAWVUTo=\", false, function () {\n  return [useOpenCv];\n});\n\n_c = DetectCanvas;\nexport default DetectCanvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"DetectCanvas\");","map":{"version":3,"sources":["/Users/yangxu/newapp/src/DetectCanvas.js"],"names":["OpenCvProvider","useOpenCv","DetectCanvas","canvas","document","getElementById","video","data","console","log","onLoaded","cv","src","Mat","height","width","CV_8UC4","dst","CV_8UC1","gray","cap","VideoCapture","faces","RectVector","classifier","CascadeClassifier","faceCascadeFile","load","processVideo","read","copyTo","cvtColor","COLOR_RGBA2GRAY","detectMultiScale","size","err","i","face","get","point1","Point","x","y","point2","rectangle"],"mappings":"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","sourcesContent":["import { OpenCvProvider, useOpenCv } from 'opencv-react'\n\nconst DetectCanvas = () => {\n    const canvas = document.getElementById(\"canvas\");\n    const video = document.getElementById(\"video\");\n    const data = useOpenCv()\n    console.log(data);\n\n    const onLoaded = (cv) => {\n        console.log('opencv loaded, cv');\n        console.log(cv);\n        console.log(canvas);\n\n        let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n        let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n        let gray = new cv.Mat();\n        let cap = new cv.VideoCapture(video);\n        let faces = new cv.RectVector();\n        let classifier = new cv.CascadeClassifier();\n\n        let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\n        classifier.load(faceCascadeFile);\n        console.log(classifier);\n        \n        const processVideo = () =>{\n            // GetFrame();\n            console.log(src);\n            if (src!=null) {\n\n                cap.read(src);\n                src.copyTo(dst);\n                cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\n                try{\n                    classifier.detectMultiScale(gray, faces, 1.1, 3, 0);\n                    console.log(faces.size());\n                }catch(err){\n                    console.log(err);\n                }\n                for (let i = 0; i < faces.size(); ++i) {\n                    let face = faces.get(i);\n                    let point1 = new cv.Point(face.x, face.y);\n                    let point2 = new cv.Point(face.x + face.width, face.y + face.height);\n                    cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);\n                }\n                // cv.imshow(\"canvas\", dst);\n                // // schedule next one.\n                // let delay = 1000/FPS - (Date.now() - begin);\n                // setTimeout(processVideo, delay);\n\n                \n            }\n        }\n        // // schedule first one.\n        // setTimeout(processVideo, 0);\n        \n\n    }\n\n    return(\n        <OpenCvProvider onLoad={onLoaded} openCvPath='/opencv/opencv.js'>\n        \n        </OpenCvProvider>\n    )\n}\n\nexport default DetectCanvas;"]},"metadata":{},"sourceType":"module"}