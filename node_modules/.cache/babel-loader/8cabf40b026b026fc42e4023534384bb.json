{"ast":null,"code":"var _jsxFileName = \"/Users/yangxu/newapp/src/MyComponent.js\",\n    _s = $RefreshSig$();\n\nimport { useOpenCv } from 'opencv-react';\nimport VideoCanvas from './VideoCanvas';\nimport { useEffect, useState } from 'react'; // import Utils from './utils'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet utils = new Utils();\n\nfunction MyComponent() {\n  _s();\n\n  const {\n    loaded,\n    cv\n  } = useOpenCv();\n  const video = document.getElementById(\"video\");\n  const canvas = document.getElementById(\"canvas\");\n  var temCanvas = document.createElement('canvas');\n  const temCtx = temCanvas.getContext(\"2d\");\n  const img_previous = new Image();\n  const img_now = new Image(); // if (video.srcObject!= null)\n  // temCtx.drawImage(video, 0, 0);\n\n  const [count, setCount] = useState(0);\n  const [videoLoaded, setVideoLoaded] = useState(false);\n\n  const VideoUpload = () => {\n    if (!videoLoaded) {\n      navigator.mediaDevices.getDisplayMedia({\n        video: {\n          width: 1280,\n          height: 720\n        },\n        audio: false\n      }).then(function (stream) {\n        video.srcObject = stream;\n        setVideoLoaded(true);\n        const settings = stream.getVideoTracks()[0].getSettings();\n        console.log(settings); // console.log('width' + stream.offsetWidth);\n\n        video.height = settings.height; // // resize video size\n\n        video.width = settings.width;\n        canvas.width = settings.width; // resize canvas size\n\n        canvas.height = settings.height;\n        temCtx.drawImage(video, 0, 0);\n        img_previous.src = \"https://en.wikipedia.org/wiki/Chinese_University_of_Hong_Kong#/media/File:CUHK.svg\";\n        video.play(); // GetFrame();\n      }).catch(function (err) {\n        console.log(\"No choose shared window! \" + err);\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (cv) {\n      // console.log(cv);\n      // console.log(loaded);\n      console.log(\"count: \" + count);\n\n      if (video.srcObject != null) {\n        let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n        let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n        let gray = new cv.Mat();\n        let cap = new cv.VideoCapture(video);\n        let faces = new cv.RectVector();\n        let classifier = new cv.CascadeClassifier();\n        let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\n\n        let utils = new Utils(cv, 'errorMessage');\n        utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n          classifier.load(faceCascadeFile); // in the callback, load the cascade from file \n        });\n        console.log(classifier);\n        var begin = Date.now();\n        cap.read(src);\n        src.copyTo(dst);\n        cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0); // try{\n        //     classifier.detectMultiScale(gray, faces, 1.1, 3, 0);\n        //     console.log(faces.size());\n        // }catch(err){\n        //     console.log(err);\n        // }\n        // for (let i = 0; i < faces.size(); ++i) {\n        //     let face = faces.get(i);\n        //     let point1 = new cv.Point(face.x, face.y);\n        //     let point2 = new cv.Point(face.x + face.width, face.y + face.height);\n        //     cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);\n        // }\n\n        cv.imshow(\"canvas\", dst);\n        img_now.src = temCanvas.toDataURL('image/jpg');\n        console.log(img_previous.src);\n        console.log(img_now.src);\n        console.log(img_previous === img_now.src);\n\n        if (img_previous.src != img_now.src) {\n          img_previous.src = img_now.src;\n          console.log(\"AAA\"); // setCount(count+1);\n        }\n      }\n\n      const FPS = 30; // const processVideo = () =>{\n      //     if (video.srcObject!= null)\n      //     {\n      //         // console.log(video.srcObject);\n      //         let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n      //         let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n      //         let gray = new cv.Mat();\n      //         let cap = new cv.VideoCapture(video);\n      //         let faces = new cv.RectVector();\n      //         let classifier = new cv.CascadeClassifier();\n      //         let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\n      //         // let utils = new Utils(cv, 'errorMessage');\n      //         // utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n      //         //     classifier.load(faceCascadeFile); // in the callback, load the cascade from file \n      //         // });\n      //         console.log(classifier);\n      //         const detectFace = () => {\n      //             var begin = Date.now();\n      //             cap.read(src);\n      //             src.copyTo(dst);\n      //             cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\n      //             // try{\n      //             //     classifier.detectMultiScale(gray, faces, 1.1, 3, 0);\n      //             //     console.log(faces.size());\n      //             // }catch(err){\n      //             //     console.log(err);\n      //             // }\n      //             // for (let i = 0; i < faces.size(); ++i) {\n      //             //     let face = faces.get(i);\n      //             //     let point1 = new cv.Point(face.x, face.y);\n      //             //     let point2 = new cv.Point(face.x + face.width, face.y + face.height);\n      //             //     cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);\n      //             // }\n      //             cv.imshow(\"canvas\", dst);\n      //             // schedule next one.\n      //             let delay = 1000/FPS - (Date.now() - begin);\n      //             setTimeout(detectFace, delay);\n      //             console.log(\"detect\");\n      //         }\n      //         setTimeout(detectFace, 0);\n      //         setTimeout(() => { clearInterval(timer) }, 0);\n      //     }\n      //     // console.log(\"AAA\");\n      //     let timer = setTimeout(processVideo, 10);\n      //     console.log(\"delay\");\n      // }\n      // // schedule first one.\n      // setTimeout(processVideo, 0);\n    }\n  }, [cv, video, count, videoLoaded]); // const cv = useOpenCv()\n  // console.log(cv)\n  // const video = document.getElementById(\"video\");\n  // let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n  // let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n  // let gray = new cv.Mat();\n  // let cap = new cv.VideoCapture(video);\n  // let faces = new cv.RectVector();\n  // let classifier = new cv.CascadeClassifier();\n  // let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\n  // classifier.load(faceCascadeFile);\n  // console.log(classifier);\n  // function onOpenUtilsReady() {\n  //     let utils = new Utils('errorMessage');\n  //     utils.loadOpenCv(() => {\n  //     let faceCascadeFile = 'haarcascade_frontalface_default.xml';\n  //         utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n  //             document.getElementById('status').innerHTML = 'OpenCV.js is ready.';\n  //         });\n  //     });\n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"status\",\n      children: \"OpenCV.js is loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"videocontainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"video\", {\n          className: \"center\",\n          id: \"video\",\n          muted: true,\n          onClick: VideoUpload\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          className: \"center\",\n          id: \"temcanvas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"center\",\n          id: \"startMessage\",\n          children: /*#__PURE__*/_jsxDEV(\"svg\", {\n            xmlns: \"http://www.w3.org/2000/svg\",\n            width: \"120\",\n            height: \"120\",\n            viewBox: \"0 0 24 24\",\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 106\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"processcontainer\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          className: \"center\",\n          id: \"canvas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(MyComponent, \"h9ro0BHJdAOcVjzaOypUggy9LRU=\", false, function () {\n  return [useOpenCv];\n});\n\n_c = MyComponent;\n\nfunction Utils(cv, errorOutputId) {\n  // eslint-disable-line no-unused-vars\n  let self = this;\n  this.errorOutput = document.getElementById(errorOutputId);\n  console.log(cv);\n  console.log(errorOutputId);\n  const OPENCV_URL = 'opencv.js';\n\n  this.loadOpenCv = function (onloadCallback) {\n    let script = document.createElement('script');\n    script.setAttribute('async', '');\n    script.setAttribute('type', 'text/javascript');\n    script.setAttribute('id', 'utils');\n    script.addEventListener('load', () => {\n      if (cv.getBuildInformation) {\n        console.log(cv.getBuildInformation());\n        onloadCallback();\n      } else {\n        // WASM\n        cv['onRuntimeInitialized'] = () => {\n          console.log(cv.getBuildInformation());\n          onloadCallback();\n        };\n      }\n    });\n    script.addEventListener('error', () => {\n      self.printError('Failed to load ' + OPENCV_URL);\n    });\n    script.src = OPENCV_URL;\n    let node = document.getElementsByTagName('script')[0];\n    node.parentNode.insertBefore(script, node);\n  };\n\n  this.createFileFromUrl = function (path, url, callback) {\n    let request = new XMLHttpRequest();\n    request.open('GET', url, true);\n    request.responseType = 'arraybuffer';\n    console.log(request);\n\n    request.onload = function (ev) {\n      if (request.readyState === 4) {\n        if (request.status === 200) {\n          let data = new Uint8Array(request.response);\n          cv.FS_createDataFile('/', path, data, true, false, false);\n          callback(); // console.log(callback);\n\n          console.log(request.response);\n        } else {\n          self.printError('Failed to load ' + url + ' status: ' + request.status);\n        }\n      }\n    };\n\n    request.send();\n  };\n\n  this.loadImageToCanvas = function (url, cavansId) {\n    let canvas = document.getElementById(cavansId);\n    let ctx = canvas.getContext('2d');\n    let img = new Image();\n    img.crossOrigin = 'anonymous';\n\n    img.onload = function () {\n      canvas.width = img.width;\n      canvas.height = img.height;\n      ctx.drawImage(img, 0, 0, img.width, img.height);\n    };\n\n    img.src = url;\n  };\n\n  this.executeCode = function (textAreaId) {\n    try {\n      this.clearError();\n      let code = document.getElementById(textAreaId).value;\n      eval(code);\n    } catch (err) {\n      this.printError(err);\n    }\n  };\n\n  this.clearError = function () {\n    this.errorOutput.innerHTML = '';\n  };\n\n  this.printError = function (err) {\n    if (typeof err === 'undefined') {\n      err = '';\n    } else if (typeof err === 'number') {\n      if (!isNaN(err)) {\n        if (typeof cv !== 'undefined') {\n          err = 'Exception: ' + cv.exceptionFromPtr(err).msg;\n        }\n      }\n    } else if (typeof err === 'string') {\n      let ptr = Number(err.split(' ')[0]);\n\n      if (!isNaN(ptr)) {\n        if (typeof cv !== 'undefined') {\n          err = 'Exception: ' + cv.exceptionFromPtr(ptr).msg;\n        }\n      }\n    } else if (err instanceof Error) {\n      err = err.stack.replace(/\\n/g, '<br>');\n    }\n\n    this.errorOutput.innerHTML = err;\n  };\n\n  this.loadCode = function (scriptId, textAreaId) {\n    let scriptNode = document.getElementById(scriptId);\n    let textArea = document.getElementById(textAreaId);\n\n    if (scriptNode.type !== 'text/code-snippet') {\n      throw Error('Unknown code snippet type');\n    }\n\n    textArea.value = scriptNode.text.replace(/^\\n/, '');\n  };\n\n  this.addFileInputHandler = function (fileInputId, canvasId) {\n    let inputElement = document.getElementById(fileInputId);\n    inputElement.addEventListener('change', e => {\n      let files = e.target.files;\n\n      if (files.length > 0) {\n        let imgUrl = URL.createObjectURL(files[0]);\n        self.loadImageToCanvas(imgUrl, canvasId);\n      }\n    }, false);\n  };\n}\n\n_c2 = Utils;\nexport default MyComponent;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MyComponent\");\n$RefreshReg$(_c2, \"Utils\");","map":{"version":3,"sources":["/Users/yangxu/newapp/src/MyComponent.js"],"names":["useOpenCv","VideoCanvas","useEffect","useState","utils","Utils","MyComponent","loaded","cv","video","document","getElementById","canvas","temCanvas","createElement","temCtx","getContext","img_previous","Image","img_now","count","setCount","videoLoaded","setVideoLoaded","VideoUpload","navigator","mediaDevices","getDisplayMedia","width","height","audio","then","stream","srcObject","settings","getVideoTracks","getSettings","console","log","drawImage","src","play","catch","err","Mat","CV_8UC4","dst","CV_8UC1","gray","cap","VideoCapture","faces","RectVector","classifier","CascadeClassifier","faceCascadeFile","createFileFromUrl","load","begin","Date","now","read","copyTo","cvtColor","COLOR_RGBA2GRAY","imshow","toDataURL","FPS","errorOutputId","self","errorOutput","OPENCV_URL","loadOpenCv","onloadCallback","script","setAttribute","addEventListener","getBuildInformation","printError","node","getElementsByTagName","parentNode","insertBefore","path","url","callback","request","XMLHttpRequest","open","responseType","onload","ev","readyState","status","data","Uint8Array","response","FS_createDataFile","send","loadImageToCanvas","cavansId","ctx","img","crossOrigin","executeCode","textAreaId","clearError","code","value","eval","innerHTML","isNaN","exceptionFromPtr","msg","ptr","Number","split","Error","stack","replace","loadCode","scriptId","scriptNode","textArea","type","text","addFileInputHandler","fileInputId","canvasId","inputElement","e","files","target","length","imgUrl","URL","createObjectURL"],"mappings":"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","sourcesContent":["import { useOpenCv } from 'opencv-react'\nimport VideoCanvas from './VideoCanvas';\nimport {useEffect, useState} from 'react'\n// import Utils from './utils'\n\nlet utils = new Utils();\n\nfunction MyComponent() {\n    const { loaded, cv } = useOpenCv();\n    const video = document.getElementById(\"video\");\n    const canvas = document.getElementById(\"canvas\");\n    var temCanvas = document.createElement('canvas');\n    const temCtx = temCanvas.getContext(\"2d\");\n    const img_previous = new Image();\n    const img_now = new Image();\n    // if (video.srcObject!= null)\n    // temCtx.drawImage(video, 0, 0);\n\n    const [count, setCount] = useState(0);\n    const [videoLoaded, setVideoLoaded] = useState(false);\n\n    const VideoUpload = () =>{\n        \n        if (!videoLoaded) {\n            navigator.mediaDevices.getDisplayMedia({ video: { width: 1280, height: 720 }, audio: false })\n            .then(function(stream) {\n                video.srcObject = stream;\n                setVideoLoaded(true);\n\n                const settings = stream.getVideoTracks()[0].getSettings();\n                console.log(settings);\n                // console.log('width' + stream.offsetWidth);\n\n                video.height = settings.height; // // resize video size\n                video.width = settings.width;\n                canvas.width = settings.width; // resize canvas size\n                canvas.height = settings.height;\n                temCtx.drawImage(video, 0, 0);\n                img_previous.src = \"https://en.wikipedia.org/wiki/Chinese_University_of_Hong_Kong#/media/File:CUHK.svg\";\n                \n                video.play();\n                // GetFrame();\n                \n            })\n            .catch(function(err) {\n                console.log(\"No choose shared window! \" + err);\n            });\n            \n        }\n    }\n    \n    useEffect(() => {\n        if (cv) {\n            // console.log(cv);\n            // console.log(loaded);\n            console.log(\"count: \"+ count);\n            \n            if (video.srcObject!= null){\n\n                let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n                let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n                let gray = new cv.Mat();\n                let cap = new cv.VideoCapture(video);\n                let faces = new cv.RectVector();\n                let classifier = new cv.CascadeClassifier();\n                let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\n                let utils = new Utils(cv, 'errorMessage');\n                utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n                    classifier.load(faceCascadeFile); // in the callback, load the cascade from file \n                });\n                console.log(classifier);\n                \n                \n                var begin = Date.now();\n                cap.read(src);\n                src.copyTo(dst);\n                cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\n                // try{\n                //     classifier.detectMultiScale(gray, faces, 1.1, 3, 0);\n                //     console.log(faces.size());\n                // }catch(err){\n                //     console.log(err);\n                // }\n                // for (let i = 0; i < faces.size(); ++i) {\n                //     let face = faces.get(i);\n                //     let point1 = new cv.Point(face.x, face.y);\n                //     let point2 = new cv.Point(face.x + face.width, face.y + face.height);\n                //     cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);\n                // }\n                cv.imshow(\"canvas\", dst);\n                \n                img_now.src = temCanvas.toDataURL('image/jpg');\n                console.log(img_previous.src);\n                console.log(img_now.src);\n                console.log(img_previous  === img_now.src)\n                if (img_previous.src != img_now.src){\n                    img_previous.src = img_now.src;\n                    console.log(\"AAA\");\n                    // setCount(count+1);\n                }\n            }\n\n            const FPS = 30;\n\n            // const processVideo = () =>{\n                \n            //     if (video.srcObject!= null)\n            //     {\n            //         // console.log(video.srcObject);\n            //         let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n            //         let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n            //         let gray = new cv.Mat();\n            //         let cap = new cv.VideoCapture(video);\n            //         let faces = new cv.RectVector();\n            //         let classifier = new cv.CascadeClassifier();\n            //         let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\n            //         // let utils = new Utils(cv, 'errorMessage');\n            //         // utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n            //         //     classifier.load(faceCascadeFile); // in the callback, load the cascade from file \n            //         // });\n            //         console.log(classifier);\n                    \n            //         const detectFace = () => {\n            //             var begin = Date.now();\n            //             cap.read(src);\n            //             src.copyTo(dst);\n            //             cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\n            //             // try{\n            //             //     classifier.detectMultiScale(gray, faces, 1.1, 3, 0);\n            //             //     console.log(faces.size());\n            //             // }catch(err){\n            //             //     console.log(err);\n            //             // }\n            //             // for (let i = 0; i < faces.size(); ++i) {\n            //             //     let face = faces.get(i);\n            //             //     let point1 = new cv.Point(face.x, face.y);\n            //             //     let point2 = new cv.Point(face.x + face.width, face.y + face.height);\n            //             //     cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);\n            //             // }\n            //             cv.imshow(\"canvas\", dst);\n                        \n                        \n            //             // schedule next one.\n            //             let delay = 1000/FPS - (Date.now() - begin);\n            //             setTimeout(detectFace, delay);\n            //             console.log(\"detect\");\n            //         }\n            //         setTimeout(detectFace, 0);\n            //         setTimeout(() => { clearInterval(timer) }, 0);\n            //     }\n            //     // console.log(\"AAA\");\n            //     let timer = setTimeout(processVideo, 10);\n            //     console.log(\"delay\");\n                \n            // }\n            // // schedule first one.\n            // setTimeout(processVideo, 0);\n\n        }\n    }, [cv, video,count, videoLoaded])\n\n    // const cv = useOpenCv()\n    // console.log(cv)\n\n    // const video = document.getElementById(\"video\");\n    // let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n    // let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n    // let gray = new cv.Mat();\n    // let cap = new cv.VideoCapture(video);\n    // let faces = new cv.RectVector();\n    // let classifier = new cv.CascadeClassifier();\n\n    // let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\n    // classifier.load(faceCascadeFile);\n    // console.log(classifier);\n\n    // function onOpenUtilsReady() {\n    //     let utils = new Utils('errorMessage');\n    //     utils.loadOpenCv(() => {\n    //     let faceCascadeFile = 'haarcascade_frontalface_default.xml';\n    //         utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n    //             document.getElementById('status').innerHTML = 'OpenCV.js is ready.';\n    //         });\n    //     });\n    // }\n\n    return (\n        <>\n        <p id=\"status\">OpenCV.js is loading...</p>\n        <div>\n            <div id=\"videocontainer\">\n                <video className=\"center\" id=\"video\" muted onClick={VideoUpload}></video>\n                <canvas className=\"center\" id=\"temcanvas\" ></canvas>\n                <div className=\"center\" id=\"startMessage\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"120\" height=\"120\" viewBox=\"0 0 24 24\"><path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\"/></svg>\n                </div>\n            </div>\n            <br />\n            <div id=\"processcontainer\" >\n                {/* <OpenCvProvider onLoad={onLoaded} openCvPath='/opencv/opencv.js'> */}\n                    <canvas className=\"center\" id=\"canvas\" ></canvas>\n                {/* </OpenCvProvider> */}\n            </div>\n        </div>\n        {/* <script async src=\"./utils.js\" onLoad={onOpenUtilsReady} type=\"text/javascript\"></script> */}\n        </>\n        \n    )\n}\n\nfunction Utils(cv, errorOutputId) { // eslint-disable-line no-unused-vars\n    let self = this;\n    this.errorOutput = document.getElementById(errorOutputId);\n    console.log(cv);\n    console.log(errorOutputId);\n    const OPENCV_URL = 'opencv.js';\n    this.loadOpenCv = function(onloadCallback) {\n        let script = document.createElement('script');\n        script.setAttribute('async', '');\n        script.setAttribute('type', 'text/javascript');\n        script.setAttribute('id', 'utils');\n        script.addEventListener('load', () => {\n            if (cv.getBuildInformation)\n            {\n                console.log(cv.getBuildInformation());\n                onloadCallback();\n            }\n            else\n            {\n                // WASM\n                cv['onRuntimeInitialized']=()=>{\n                    console.log(cv.getBuildInformation());\n                    onloadCallback();\n                }\n            }\n        });\n        script.addEventListener('error', () => {\n            self.printError('Failed to load ' + OPENCV_URL);\n        });\n        script.src = OPENCV_URL;\n        let node = document.getElementsByTagName('script')[0];\n        node.parentNode.insertBefore(script, node);\n    };\n\n    this.createFileFromUrl = function(path, url, callback) {\n        let request = new XMLHttpRequest();\n        request.open('GET', url, true);\n        request.responseType = 'arraybuffer';\n        console.log(request);\n        request.onload = function(ev) {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    let data = new Uint8Array(request.response);\n                    cv.FS_createDataFile('/', path, data, true, false, false);\n                    callback();\n                    // console.log(callback);\n                    console.log(request.response);\n                } else {\n                    self.printError('Failed to load ' + url + ' status: ' + request.status);\n                }\n            }\n        };\n        request.send();\n    };\n\n    this.loadImageToCanvas = function(url, cavansId) {\n        let canvas = document.getElementById(cavansId);\n        let ctx = canvas.getContext('2d');\n        let img = new Image();\n        img.crossOrigin = 'anonymous';\n        img.onload = function() {\n            canvas.width = img.width;\n            canvas.height = img.height;\n            ctx.drawImage(img, 0, 0, img.width, img.height);\n        };\n        img.src = url;\n    };\n\n    this.executeCode = function(textAreaId) {\n        try {\n            this.clearError();\n            let code = document.getElementById(textAreaId).value;\n            eval(code);\n        } catch (err) {\n            this.printError(err);\n        }\n    };\n\n    this.clearError = function() {\n        this.errorOutput.innerHTML = '';\n    };\n\n    this.printError = function(err) {\n        if (typeof err === 'undefined') {\n            err = '';\n        } else if (typeof err === 'number') {\n            if (!isNaN(err)) {\n                if (typeof cv !== 'undefined') {\n                    err = 'Exception: ' + cv.exceptionFromPtr(err).msg;\n                }\n            }\n        } else if (typeof err === 'string') {\n            let ptr = Number(err.split(' ')[0]);\n            if (!isNaN(ptr)) {\n                if (typeof cv !== 'undefined') {\n                    err = 'Exception: ' + cv.exceptionFromPtr(ptr).msg;\n                }\n            }\n        } else if (err instanceof Error) {\n            err = err.stack.replace(/\\n/g, '<br>');\n        }\n        this.errorOutput.innerHTML = err;\n    };\n\n    this.loadCode = function(scriptId, textAreaId) {\n        let scriptNode = document.getElementById(scriptId);\n        let textArea = document.getElementById(textAreaId);\n        if (scriptNode.type !== 'text/code-snippet') {\n            throw Error('Unknown code snippet type');\n        }\n        textArea.value = scriptNode.text.replace(/^\\n/, '');\n    };\n\n    this.addFileInputHandler = function(fileInputId, canvasId) {\n        let inputElement = document.getElementById(fileInputId);\n        inputElement.addEventListener('change', (e) => {\n            let files = e.target.files;\n            if (files.length > 0) {\n                let imgUrl = URL.createObjectURL(files[0]);\n                self.loadImageToCanvas(imgUrl, canvasId);\n            }\n        }, false);\n    };\n}\n\n\nexport default MyComponent;\n\n\n"]},"metadata":{},"sourceType":"module"}