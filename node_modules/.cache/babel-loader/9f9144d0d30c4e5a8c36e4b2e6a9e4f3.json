{"ast":null,"code":"var add_button = document.getElementById(\"add\");\nvar zoom_window_text = document.getElementById(\"zoom_window_text\");\nvar process_window_text = document.getElementById(\"process_window_text\");\nvar video = document.getElementById(\"cam_input\");\nvar output = document.getElementById(\"canvas_output\");\nvar container = document.getElementById(\"container\");\nconsole.log('iexam:', window.cv);\nlet utils = new Utils(); // add.addEventListener(\"click\", function(e) {\n//     navigator.mediaDevices.getDisplayMedia({ video: true, audio: false })\n//     .then(function(stream) {\n//         video.srcObject = stream;\n//         let settings = stream.getVideoTracks()[0].getSettings();\n//         console.log(settings);\n//         add_button.style.display = \"none\";\n//         zoom_window_text.style.display = \"none\";\n//         process_window_text.style.display = \"none\";\n//         // FPS = settings.frameRate;\n//         output.style.width = video.style.width;\n//         output.style.height = video.style.height;\n//         video.play();\n//     })\n//     .then(()=> {\n//         utils.loadOpenCv(openCvReady);\n//     })\n//     .catch(function(err) {\n//         console.log(\"An error occurred! \" + err);\n//     });\n// })\n\nfunction openCvReady() {\n  // console.log(cv);\n  let FPS = 30;\n  let video = document.getElementById(\"cam_input\");\n  let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n  let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n  let gray = new cv.Mat();\n  let cap = new cv.VideoCapture(cam_input);\n  let faces = new cv.RectVector();\n  let classifier = new cv.CascadeClassifier();\n  let minsize = new cv.Size(0, 0);\n  let maxsize = new cv.Size(1000, 1000);\n  let faceCascadeFile = 'haarcascade_frontalface_default.xml';\n  utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n    classifier.load(faceCascadeFile); // in the callback, load the cascade from file \n  });\n  let face_row = -1;\n  let face_col = -1;\n  let clip_width = video.width / 5;\n  let clip_height = video.height / 5;\n\n  function processVideo() {\n    let begin = Date.now();\n\n    if (video.srcObject != null) {\n      cap.read(src);\n      src.copyTo(dst);\n      cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\n\n      try {\n        classifier.detectMultiScale(gray, faces, 1.1, 3);\n        console.log(\"face size: \" + faces.size());\n      } catch (err) {\n        console.log(err);\n      }\n\n      for (let i = 0; i < faces.size(); ++i) {\n        let face = faces.get(i); // console.log(face);\n\n        let face_row = parseInt(face.y / clip_height);\n        let face_col = parseInt(face.x / clip_width);\n        let tmp_row = parseInt((face.y + face.height - 5) / clip_height);\n        let tmp_col = parseInt((face.x + face.width - 5) / clip_width); // console.log([face_row, face_col, tmp_row, tmp_col]);\n\n        if (face.width >= clip_width || face.height >= clip_height || tmp_row != face_row || tmp_col != face_col) continue;\n        let point1 = new cv.Point(face.x, face.y);\n        let point2 = new cv.Point(face.x + face.width, face.y + face.height);\n        cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);\n      }\n\n      cv.imshow(\"canvas_output\", dst);\n    } // schedule next one.\n\n\n    let delay = 1000 / FPS - (Date.now() - begin);\n    setTimeout(processVideo, delay);\n  } // schedule first one.\n\n\n  setTimeout(processVideo, 0);\n}\n\nfunction Utils() {\n  let self = this;\n\n  this.createFileFromUrl = function (path, url, callback) {\n    let request = new XMLHttpRequest();\n    request.open('GET', url, true);\n    request.responseType = 'arraybuffer';\n\n    request.onload = function (ev) {\n      if (request.readyState === 4) {\n        if (request.status === 200) {\n          let data = new Uint8Array(request.response);\n          cv.FS_createDataFile('/', path, data, true, false, false);\n          callback();\n        } else {\n          self.printError('Failed to load ' + url + ' status: ' + request.status);\n        }\n      }\n    };\n\n    request.send();\n  };\n\n  const OPENCV_URL = 'opencv.js';\n\n  this.loadOpenCv = function (onloadCallback) {\n    let script = document.createElement('script');\n    script.setAttribute('async', '');\n    script.setAttribute('type', 'text/javascript');\n    script.addEventListener('load', async () => {\n      if (cv.getBuildInformation) {\n        console.log(cv.getBuildInformation());\n        onloadCallback();\n      } else {\n        // WASM\n        if (cv instanceof Promise) {\n          cv = await cv;\n          console.log(cv.getBuildInformation());\n          onloadCallback();\n        } else {\n          cv['onRuntimeInitialized'] = () => {\n            //satisfy this condition\n            console.log(cv.getBuildInformation());\n            onloadCallback();\n          };\n        }\n      }\n    });\n    script.addEventListener('error', () => {\n      self.printError('Failed to load ' + OPENCV_URL);\n    });\n    script.src = OPENCV_URL;\n    let node = document.getElementsByTagName('script')[0];\n    node.parentNode.insertBefore(script, node);\n  };\n}\n\n_c = Utils;\n\nvar _c;\n\n$RefreshReg$(_c, \"Utils\");","map":{"version":3,"sources":["/Users/yangxu/newappcopy/src/iexam.js"],"names":["add_button","document","getElementById","zoom_window_text","process_window_text","video","output","container","console","log","window","cv","utils","Utils","openCvReady","FPS","src","Mat","height","width","CV_8UC4","dst","CV_8UC1","gray","cap","VideoCapture","cam_input","faces","RectVector","classifier","CascadeClassifier","minsize","Size","maxsize","faceCascadeFile","createFileFromUrl","load","face_row","face_col","clip_width","clip_height","processVideo","begin","Date","now","srcObject","read","copyTo","cvtColor","COLOR_RGBA2GRAY","detectMultiScale","size","err","i","face","get","parseInt","y","x","tmp_row","tmp_col","point1","Point","point2","rectangle","imshow","delay","setTimeout","self","path","url","callback","request","XMLHttpRequest","open","responseType","onload","ev","readyState","status","data","Uint8Array","response","FS_createDataFile","printError","send","OPENCV_URL","loadOpenCv","onloadCallback","script","createElement","setAttribute","addEventListener","getBuildInformation","Promise","node","getElementsByTagName","parentNode","insertBefore"],"mappings":"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","sourcesContent":["\nvar add_button = document.getElementById(\"add\");\nvar zoom_window_text = document.getElementById(\"zoom_window_text\");\nvar process_window_text = document.getElementById(\"process_window_text\");\nvar video = document.getElementById(\"cam_input\");\nvar output = document.getElementById(\"canvas_output\");\nvar container = document.getElementById(\"container\");\n\nconsole.log('iexam:', window.cv);\nlet utils = new Utils();\n\n\n// add.addEventListener(\"click\", function(e) {\n//     navigator.mediaDevices.getDisplayMedia({ video: true, audio: false })\n//     .then(function(stream) {\n//         video.srcObject = stream;\n//         let settings = stream.getVideoTracks()[0].getSettings();\n//         console.log(settings);\n//         add_button.style.display = \"none\";\n//         zoom_window_text.style.display = \"none\";\n//         process_window_text.style.display = \"none\";\n//         // FPS = settings.frameRate;\n//         output.style.width = video.style.width;\n//         output.style.height = video.style.height;\n//         video.play();\n//     })\n//     .then(()=> {\n//         utils.loadOpenCv(openCvReady);\n//     })\n//     .catch(function(err) {\n//         console.log(\"An error occurred! \" + err);\n//     });\n// })\n\nfunction openCvReady() {\n    // console.log(cv);\n    let FPS = 30;\n    let video = document.getElementById(\"cam_input\");\n    let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n    let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n    let gray = new cv.Mat();\n    let cap = new cv.VideoCapture(cam_input);\n    let faces = new cv.RectVector();\n    let classifier = new cv.CascadeClassifier();\n    let minsize = new cv.Size(0, 0);\n    let maxsize = new cv.Size(1000, 1000);\n    let faceCascadeFile = 'haarcascade_frontalface_default.xml';\n    utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n        classifier.load(faceCascadeFile); // in the callback, load the cascade from file \n    });\n    let face_row = -1;\n    let face_col = -1;\n    let clip_width = video.width/5;\n    let clip_height = video.height/5;\n    function processVideo() {\n        let begin = Date.now();\n        if (video.srcObject!=null){\n            cap.read(src);\n            src.copyTo(dst);\n            cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\n            try{\n                classifier.detectMultiScale(gray, faces, 1.1, 3);\n                console.log(\"face size: \"+ faces.size());\n            }catch(err){\n                console.log(err);\n            }\n            for (let i = 0; i < faces.size(); ++i) {\n                let face = faces.get(i);\n                // console.log(face);\n                let face_row = parseInt(face.y/clip_height);\n                let face_col = parseInt(face.x/clip_width);\n\n                let tmp_row = parseInt((face.y+face.height-5) / clip_height);\n                let tmp_col = parseInt((face.x+face.width-5) / clip_width);\n                // console.log([face_row, face_col, tmp_row, tmp_col]);\n                if (face.width>=clip_width || face.height>=clip_height || tmp_row!=face_row || tmp_col!=face_col)\n                    continue;\n\n                let point1 = new cv.Point(face.x, face.y);\n                let point2 = new cv.Point(face.x + face.width, face.y + face.height);\n                cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);\n            }\n            cv.imshow(\"canvas_output\", dst);\n        }\n        // schedule next one.\n        let delay = 1000/FPS - (Date.now() - begin);\n        setTimeout(processVideo, delay);\n    }\n    // schedule first one.\n    setTimeout(processVideo, 0); \n}\n\nfunction Utils() {\n    let self = this;\n    this.createFileFromUrl = function(path, url, callback) {\n        let request = new XMLHttpRequest();\n        request.open('GET', url, true);\n        request.responseType = 'arraybuffer';\n        request.onload = function(ev) {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    let data = new Uint8Array(request.response);\n                    cv.FS_createDataFile('/', path, data, true, false, false);\n                    callback();\n                } else {\n                    self.printError('Failed to load ' + url + ' status: ' + request.status);\n                }\n            }\n        };\n        request.send();\n        \n    };\n\n    const OPENCV_URL = 'opencv.js';\n    this.loadOpenCv = function(onloadCallback) {\n        let script = document.createElement('script');\n        script.setAttribute('async', '');\n        script.setAttribute('type', 'text/javascript');\n        script.addEventListener('load', async () => {\n            if (cv.getBuildInformation)\n            {\n                console.log(cv.getBuildInformation());\n                onloadCallback();\n            }\n            else\n            {\n                // WASM\n                if (cv instanceof Promise) {\n                    cv = await cv;\n                    console.log(cv.getBuildInformation());\n                    onloadCallback();\n                } else {\n                    cv['onRuntimeInitialized']=()=>{  //satisfy this condition\n                        console.log(cv.getBuildInformation()); \n                        onloadCallback();\n                    }\n                }\n            }\n        });\n        script.addEventListener('error', () => {\n            self.printError('Failed to load ' + OPENCV_URL);\n        });\n        script.src = OPENCV_URL;\n        let node = document.getElementsByTagName('script')[0];\n        node.parentNode.insertBefore(script, node);\n    };\n}"]},"metadata":{},"sourceType":"module"}