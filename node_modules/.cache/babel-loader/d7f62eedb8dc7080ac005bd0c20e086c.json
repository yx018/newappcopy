{"ast":null,"code":"var _jsxFileName = \"/Users/yangxu/newapp/src/VideoCanvas.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { OpenCvProvider } from 'opencv-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction VideoCanvas() {\n  _s();\n\n  const [videoLoaded, setVideoLoaded] = useState(false);\n  const [FPS] = useState(30);\n\n  const VideoUpload = () => {\n    const video = document.getElementById(\"video\");\n    const canvas = document.getElementById(\"canvas\");\n\n    if (!videoLoaded) {\n      navigator.mediaDevices.getDisplayMedia({\n        video: {\n          width: 1280,\n          height: 720\n        },\n        audio: false\n      }).then(function (stream) {\n        video.srcObject = stream;\n        setVideoLoaded(true); // processVideo()\n\n        const settings = stream.getVideoTracks()[0].getSettings(); // console.log(settings);\n        // console.log('width' + stream.offsetWidth);\n\n        video.height = settings.height; // // resize video size\n\n        video.width = settings.width;\n        canvas.width = settings.width; // resize canvas size\n\n        canvas.height = settings.height; // console.log(video.height);\n\n        video.play(); // GetFrame();\n      }).catch(function (err) {\n        console.log(\"No choose shared window! \" + err);\n      });\n    }\n  }; // const GetFrame = ()=> {\n  //     const video = document.getElementById(\"video\");\n  //     const ctx = document.getElementById(\"canvas\").getContext('2d');\n  //     var begin = Date.now();\n  //     // console.log(video)\n  //     ctx.drawImage(video, 0, 0);\n  //     var delay = 1000 / FPS - (Date.now() - begin);\n  //     setTimeout(GetFrame, delay);\n  // }\n\n\n  const onLoaded = cv => {\n    console.log('AAA');\n    console.log(cv); // const video = document.getElementById(\"video\");\n    //     // const cascadeClassifier = new cv.CascadeClassifier();\n    //     // console.log(cascadeClassifier);\n    //     // cascadeClassifier\n    // let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n    // let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n    // let gray = new cv.Mat();\n    // let cap = new cv.VideoCapture(video);\n    // console.log(cap);\n    // console.log(src);\n    // cap.read(src);\n    // let faces = new cv.RectVector();\n    // let classifier = new cv.CascadeClassifier();\n    // let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\n    // classifier.load(faceCascadeFile);\n    // console.log(classifier);\n    //     const processVideo = () =>{\n    //         // GetFrame();\n    //         console.log(src);\n    //         if (src!=null) {\n    //             cap.read(src);\n    //             src.copyTo(dst);\n    //             cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\n    //             try{\n    //                 classifier.detectMultiScale(gray, faces, 1.1, 3, 0);\n    //                 console.log(faces.size());\n    //             }catch(err){\n    //                 console.log(err);\n    //             }\n    //             for (let i = 0; i < faces.size(); ++i) {\n    //                 let face = faces.get(i);\n    //                 let point1 = new cv.Point(face.x, face.y);\n    //                 let point2 = new cv.Point(face.x + face.width, face.y + face.height);\n    //                 cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);\n    //             }\n    //             // cv.imshow(\"canvas\", dst);\n    //             // // schedule next one.\n    //             // let delay = 1000/FPS - (Date.now() - begin);\n    //             // setTimeout(processVideo, delay);\n    //         }\n    //     }\n    //     // // schedule first one.\n    //     // setTimeout(processVideo, 0);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"videocontainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        className: \"center\",\n        id: \"video\",\n        muted: true,\n        onClick: VideoUpload\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"center\",\n        id: \"startMessage\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          width: \"120\",\n          height: \"120\",\n          viewBox: \"0 0 24 24\",\n          children: /*#__PURE__*/_jsxDEV(\"path\", {\n            d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 106\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"processcontainer\",\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: \"center\",\n        id: \"canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n}\n\n_s(VideoCanvas, \"pOS9SD3oULbXZ4VF2aKAJpTkyPk=\");\n\n_c = VideoCanvas;\nexport default VideoCanvas;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoCanvas\");","map":{"version":3,"sources":["/Users/yangxu/newapp/src/VideoCanvas.js"],"names":["useState","OpenCvProvider","VideoCanvas","videoLoaded","setVideoLoaded","FPS","VideoUpload","video","document","getElementById","canvas","navigator","mediaDevices","getDisplayMedia","width","height","audio","then","stream","srcObject","settings","getVideoTracks","getSettings","play","catch","err","console","log","onLoaded","cv"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport { OpenCvProvider } from 'opencv-react'\n\n\nfunction VideoCanvas(){\n\n    const [videoLoaded, setVideoLoaded] = useState(false);\n    const [FPS] = useState(30);\n    \n    const VideoUpload = () =>{\n        const video = document.getElementById(\"video\");\n        const canvas = document.getElementById(\"canvas\");\n        if (!videoLoaded) {\n            navigator.mediaDevices.getDisplayMedia({ video: { width: 1280, height: 720 }, audio: false })\n            .then(function(stream) {\n                video.srcObject = stream;\n                setVideoLoaded(true);\n                // processVideo()\n                \n    \n                \n                const settings = stream.getVideoTracks()[0].getSettings();\n                // console.log(settings);\n                // console.log('width' + stream.offsetWidth);\n\n                video.height = settings.height; // // resize video size\n                video.width = settings.width;\n                canvas.width = settings.width; // resize canvas size\n                canvas.height = settings.height;\n                // console.log(video.height);\n                video.play();\n                // GetFrame();\n                \n            })\n            .catch(function(err) {\n                console.log(\"No choose shared window! \" + err);\n            });\n            \n        }\n    }\n\n    // const GetFrame = ()=> {\n    //     const video = document.getElementById(\"video\");\n    //     const ctx = document.getElementById(\"canvas\").getContext('2d');\n    //     var begin = Date.now();\n        \n    //     // console.log(video)\n    //     ctx.drawImage(video, 0, 0);\n\n        \n    //     var delay = 1000 / FPS - (Date.now() - begin);\n    //     setTimeout(GetFrame, delay);\n    // }\n\n    const onLoaded = (cv) => {\n        console.log('AAA');\n        \n        console.log(cv);\n        // const video = document.getElementById(\"video\");\n    //     // const cascadeClassifier = new cv.CascadeClassifier();\n    //     // console.log(cascadeClassifier);\n    //     // cascadeClassifier\n\n        // let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n        // let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n        // let gray = new cv.Mat();\n        // let cap = new cv.VideoCapture(video);\n        // console.log(cap);\n        // console.log(src);\n        // cap.read(src);\n        // let faces = new cv.RectVector();\n        // let classifier = new cv.CascadeClassifier();\n\n        // let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\n        // classifier.load(faceCascadeFile);\n        // console.log(classifier);\n        \n    //     const processVideo = () =>{\n    //         // GetFrame();\n    //         console.log(src);\n    //         if (src!=null) {\n\n    //             cap.read(src);\n    //             src.copyTo(dst);\n    //             cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\n    //             try{\n    //                 classifier.detectMultiScale(gray, faces, 1.1, 3, 0);\n    //                 console.log(faces.size());\n    //             }catch(err){\n    //                 console.log(err);\n    //             }\n    //             for (let i = 0; i < faces.size(); ++i) {\n    //                 let face = faces.get(i);\n    //                 let point1 = new cv.Point(face.x, face.y);\n    //                 let point2 = new cv.Point(face.x + face.width, face.y + face.height);\n    //                 cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);\n    //             }\n    //             // cv.imshow(\"canvas\", dst);\n    //             // // schedule next one.\n    //             // let delay = 1000/FPS - (Date.now() - begin);\n    //             // setTimeout(processVideo, delay);\n\n                \n    //         }\n    //     }\n    //     // // schedule first one.\n    //     // setTimeout(processVideo, 0);\n        \n    }\n\n\n    \n    return(\n        <div>\n            <div id=\"videocontainer\">\n                <video className=\"center\" id=\"video\" muted onClick={VideoUpload}></video>\n                {/* <canvas id=\"canvas1\" ></canvas> */}\n                <div className=\"center\" id=\"startMessage\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"120\" height=\"120\" viewBox=\"0 0 24 24\"><path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\"/></svg>\n                </div>\n            </div>\n            <br />\n            <div id=\"processcontainer\" >\n                {/* <OpenCvProvider onLoad={onLoaded} openCvPath='/opencv/opencv.js'> */}\n                    <canvas className=\"center\" id=\"canvas\"></canvas>\n                {/* </OpenCvProvider> */}\n            </div>\n        </div>\n        \n    )\n}\n\n\nexport default VideoCanvas;"]},"metadata":{},"sourceType":"module"}