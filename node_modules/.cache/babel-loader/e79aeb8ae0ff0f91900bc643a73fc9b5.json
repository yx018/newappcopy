{"ast":null,"code":"var _jsxFileName = \"/Users/yangxu/newapp/src/MyComponent.js\";\n// import { OpenCvProvider, useOpenCv } from 'opencv-react'\nimport { useEffect, useState } from 'react';\nimport './MyComponent.css'; // import Utils from './Utils';\n\nimport checkBrowser from './iexam';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction MyComponent() {\n  // const { loaded, cv } = useOpenCv();\n  // const [videoLoaded, setVideoLoaded] = useState(false);\n  // let utils;\n  // let classifier;\n  // let faceCascadeFile = \"haarcascade_frontalface_default.xml\";\n  // useEffect(() => {\n  //     console.log(loaded, cv);\n  //     if (loaded) {\n  //         console.log('component cv loaded');\n  //         if(videoLoaded){\n  //             console.log('video loaded');\n  //             utils = new Utils(cv);\n  //             classifier = new cv.CascadeClassifier();\n  //             utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, ()=>{\n  //             });\n  //             classifier.load(faceCascadeFile);\n  //             console.log('classifier:', classifier);\n  //             setTimeout(function() {\n  //                 openCvReady(classifier);\n  //               }, 5000);\n  //             // utils.loadOpenCv(openCvReady);\n  //         }\n  //     }\n  // }, [loaded, videoLoaded])\n  // const add_button = document.getElementById(\"add\");\n  // const zoom_window_text = document.getElementById(\"zoom_window_text\");\n  // const process_window_text = document.getElementById(\"process_window_text\");\n  // const video = document.getElementById(\"cam_input\");\n  // const output = document.getElementById(\"canvas_output\");\n  // const [count, setCount] = useState(0);\n  // const catchZoomWindow = () => {\n  //     navigator.mediaDevices.getDisplayMedia({ video: true, audio: false })\n  //     .then(function(stream) {\n  //         // let video = document.getElementById(\"cam_input\");\n  //         // console.log(video);\n  //         // console.log(stream);\n  //         video.srcObject = stream;\n  //         console.log(stream);\n  //         let settings = stream.getVideoTracks()[0].getSettings();\n  //         console.log(settings);\n  //         add_button.style.display = \"none\";\n  //         zoom_window_text.style.display = \"none\";\n  //         process_window_text.style.display = \"none\";\n  //         // FPS = settings.frameRate;\n  //         output.style.width = video.style.width;\n  //         output.style.height = video.style.height;\n  //         video.play();\n  //     })\n  //     .then(()=>{\n  //         console.log('component catch', cv);\n  //         // console.log(OpenCvProvider.onLoaded);\n  //     })\n  //     .then(()=> {\n  //         // openCvReady();\n  //         // utils.loadOpenCv(openCvReady);\n  //         setVideoLoaded(true);\n  //     })\n  //     .catch((err) =>{\n  //         console.log(\"An error occurred! \" + err);\n  //     });\n  // }\n  // function openCvReady(classifier) {\n  //     // const { loaded, cv } = useOpenCv();\n  //     console.log('opencvReady', cv.Mat, loaded);\n  //     let FPS = 0.25;\n  //     // let video = document.getElementById(\"cam_input\");\n  //     let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n  //     let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n  //     let gray = new cv.Mat();\n  //     let cap = new cv.VideoCapture(video);\n  //     let faces = new cv.RectVector();\n  //     // let classifier = new cv.CascadeClassifier();\n  //     let minsize = new cv.Size(0, 0);\n  //     let maxsize = new cv.Size(1000, 1000);\n  //     // let faceCascadeFile = \"haarcascade_frontalface_default.xml\";\n  //     console.log('here');\n  //     // utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n  //     //     console.log('here2');\n  //     //     classifier.load(faceCascadeFile) // in the callback, load the cascade from file\n  //     //     .then(()=>{\n  //     //         console.log('AAA'); \n  //     //         processVideo();\n  //     //     })\n  //     //     .catch((err)=>{console.log('load classifier:', err)});\n  //     // });\n  //     let clip_width = video.width/5;\n  //     let clip_height = video.height/5;\n  //     // let face_row = -1;\n  //     // let face_col = -1;\n  //     // while(true){\n  //     //     let begin = Date.now();\n  //     //     cap.read(src);\n  //     //     src.copyTo(dst);\n  //     //     cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\n  //     //     console.log('process classifier:', classifier);\n  //     //     // console.log(classifier.load);\n  //     //     // console.log(gray);\n  //     //     // console.log(faces);\n  //     //     try{\n  //     //         classifier.detectMultiScale(gray, faces, 1.1, 3);\n  //     //     }catch(err){\n  //     //         console.log(err);\n  //     //     }\n  //     // }\n  //     function processVideo() {\n  //         let begin = Date.now();\n  //         if (video.srcObject!=null){\n  //             cap.read(src);\n  //             src.copyTo(dst);\n  //             cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\n  //             console.log('process classifier:', classifier);\n  //             // console.log(classifier.load);\n  //             // console.log(gray);\n  //             // console.log(faces);\n  //             try{\n  //                 classifier.detectMultiScale(gray, faces, 1.1, 3);\n  //             }catch(err){\n  //                 console.log(err);\n  //             }\n  //             // for (let i = 0; i < faces.size(); ++i) {\n  //             //     let face = faces.get(i);\n  //             //     // console.log(face);\n  //             //     let face_row = parseInt(face.y/clip_height);\n  //             //     let face_col = parseInt(face.x/clip_width);\n  //             //     let tmp_row = parseInt((face.y+face.height-5) / clip_height);\n  //             //     let tmp_col = parseInt((face.x+face.width-5) / clip_width);\n  //             //     // console.log([face_row, face_col, tmp_row, tmp_col]);\n  //             //     if (face.width>=clip_width || face.height>=clip_height || tmp_row!=face_row || tmp_col!=face_col)\n  //             //         continue;\n  //             //     let point1 = new cv.Point(face.x, face.y);\n  //             //     let point2 = new cv.Point(face.x + face.width, face.y + face.height);\n  //             //     cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);\n  //             // }\n  //             cv.imshow(\"canvas_output\", dst);\n  //         }\n  //         // schedule next one.\n  //         let delay = 1000/FPS - (Date.now() - begin);\n  //         setTimeout(processVideo, delay);\n  //     }\n  //     // schedule first one.\n  //     setTimeout(processVideo, 0);\n  // }\n  // const cv = useOpenCv()\n  // console.log(cv)\n  // const video = document.getElementById(\"video\");\n  // let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n  // let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n  // let gray = new cv.Mat();\n  // let cap = new cv.VideoCapture(video);\n  // let faces = new cv.RectVector();\n  // let classifier = new cv.CascadeClassifier();\n  // let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\n  // classifier.load(faceCascadeFile);\n  // console.log(classifier);\n  // function onOpenUtilsReady() {\n  //     let utils = new Utils('errorMessage');\n  //     utils.loadOpenCv(() => {\n  //     let faceCascadeFile = 'haarcascade_frontalface_default.xml';\n  //         utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n  //             document.getElementById('status').innerHTML = 'OpenCV.js is ready.';\n  //         });\n  //     });\n  // }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      onLoad: checkBrowser,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        id: \"title\",\n        children: \"iExam\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n        id: \"tip\",\n        children: \"Please click add button to import the Zoom stream. Then you can scroll down to the iExam window.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"zoom_window_text\",\n        children: \"Zoom window\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n        id: \"cam_input\",\n        width: \"1200\",\n        height: \"690\",\n        autoPlay: true,\n        muted: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        id: \"add\",\n        width: \"120\",\n        height: \"120\",\n        viewBox: \"0 0 24 24\",\n        children: /*#__PURE__*/_jsxDEV(\"path\", {\n          d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 107\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"process_window_text\",\n        children: \"iExam window\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        id: \"canvas_output\",\n        width: \"1200\",\n        height: \"690\",\n        children: \"This box is for capturing student face\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"footer\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Details for iExam please refer to slides: \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://daoyuan14.github.io/slides/Expo21_iExam.pdf\",\n          target: \"_blank\",\n          children: \"https://daoyuan14.github.io/slides/Expo21_iExam.pdf\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 58\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Post-exam recording analysis for desktop version, please view: \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://github.com/VPRLab/iExam/tree/test\",\n          target: \"_blank\",\n          children: \"https://github.com/VPRLab/iExam/tree/test \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 79\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"script\", {\n      src: \"./src/iexam.js\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n} // function Utils() {\n//     let self = this;\n//     this.createFileFromUrl = function(path, url, callback) {\n//         console.log(cv);\n//         let request = new XMLHttpRequest();\n//         request.open('GET', url, true);\n//         request.responseType = 'arraybuffer';\n//         request.onload = function(ev) {\n//             if (request.readyState === 4) {\n//                 if (request.status === 200) {\n//                     let data = new Uint8Array(request.response);\n//                     cv.FS_createDataFile('/', path, data, true, false, false);\n//                     callback();\n//                 } else {\n//                     self.printError('Failed to load ' + url + ' status: ' + request.status);\n//                 }\n//             }\n//         };\n//         request.send();\n//     };\n//     const OPENCV_URL = './opencv/opencv.js';\n//     this.loadOpenCv = function(onloadCallback) {\n//         let script = document.createElement('script');\n//         script.setAttribute('async', '');\n//         script.setAttribute('type', 'text/javascript');\n//         script.addEventListener('load', async () => {\n//             if (cv.getBuildInformation)\n//             {\n//                 console.log(cv.getBuildInformation());\n//                 onloadCallback();\n//             }\n//             else\n//             {\n//                 // WASM\n//                 if (cv instanceof Promise) {\n//                     cv = await cv;\n//                     console.log(cv.getBuildInformation());\n//                     onloadCallback();\n//                 } else {\n//                     cv['onRuntimeInitialized']=()=>{  //satisfy this condition\n//                         console.log(cv.getBuildInformation()); \n//                         onloadCallback();\n//                     }\n//                 }\n//             }\n//         });\n//         script.addEventListener('error', () => {\n//             self.printError('Failed to load ' + OPENCV_URL);\n//         });\n//         script.src = OPENCV_URL;\n//         let node = document.getElementsByTagName('script')[0];\n//         node.parentNode.insertBefore(script, node);\n//     };\n// }\n\n\n_c = MyComponent;\nexport default MyComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyComponent\");","map":{"version":3,"sources":["/Users/yangxu/newapp/src/MyComponent.js"],"names":["useEffect","useState","checkBrowser","MyComponent"],"mappings":";AAAA;AACA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,OAAO,mBAAP,C,CACA;;AACA,OAAOC,YAAP,MAAyB,SAAzB;;;;AAEA,SAASC,WAAT,GAAuB;AAEnB;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,sBACI;AAAA,4BACA;AAAK,MAAA,SAAS,EAAC,WAAf;AAA2B,MAAA,MAAM,EAAED,YAAnC;AAAA,8BACI;AAAI,QAAA,EAAE,EAAC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAI,QAAA,EAAE,EAAC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAG,QAAA,EAAE,EAAC,kBAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAO,QAAA,EAAE,EAAC,WAAV;AAAsB,QAAA,KAAK,EAAC,MAA5B;AAAmC,QAAA,MAAM,EAAC,KAA1C;AAAgD,QAAA,QAAQ,MAAxD;AAAyD,QAAA,KAAK;AAA9D;AAAA;AAAA;AAAA;AAAA,cAJJ,eAMI;AAAK,QAAA,KAAK,EAAC,4BAAX;AAAwC,QAAA,EAAE,EAAC,KAA3C;AAAiD,QAAA,KAAK,EAAC,KAAvD;AAA6D,QAAA,MAAM,EAAC,KAApE;AAA0E,QAAA,OAAO,EAAC,WAAlF;AAAA,+BAA8F;AAAM,UAAA,CAAC,EAAC;AAAR;AAAA;AAAA;AAAA;AAAA;AAA9F;AAAA;AAAA;AAAA;AAAA,cANJ,eAOI;AAAG,QAAA,EAAE,EAAC,qBAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ,eAQI;AAAQ,QAAA,EAAE,EAAC,eAAX;AAA2B,QAAA,KAAK,EAAC,MAAjC;AAAwC,QAAA,MAAM,EAAC,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAWA;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,8BACI;AAAA,8EAA6C;AAAG,UAAA,IAAI,EAAC,qDAAR;AAA8D,UAAA,MAAM,EAAC,QAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA7C;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,mGAAkE;AAAG,UAAA,IAAI,EAAC,2CAAR;AAAoD,UAAA,MAAM,EAAC,QAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAlE;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAXA,eAiBA;AAAQ,MAAA,GAAG,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,YAjBA;AAAA,kBADJ;AAsBH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;KAnSSC,W;AAuST,eAAeA,WAAf","sourcesContent":["// import { OpenCvProvider, useOpenCv } from 'opencv-react'\nimport {useEffect, useState} from 'react'\nimport './MyComponent.css';\n// import Utils from './Utils';\nimport checkBrowser from './iexam'\n\nfunction MyComponent() {\n\n    // const { loaded, cv } = useOpenCv();\n    // const [videoLoaded, setVideoLoaded] = useState(false);\n\n    // let utils;\n    // let classifier;\n    // let faceCascadeFile = \"haarcascade_frontalface_default.xml\";\n\n    // useEffect(() => {\n    //     console.log(loaded, cv);\n    //     if (loaded) {\n    //         console.log('component cv loaded');\n    //         if(videoLoaded){\n    //             console.log('video loaded');\n    //             utils = new Utils(cv);\n    //             classifier = new cv.CascadeClassifier();\n    //             utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, ()=>{\n                    \n    //             });\n    //             classifier.load(faceCascadeFile);\n\n    //             console.log('classifier:', classifier);\n    //             setTimeout(function() {\n    //                 openCvReady(classifier);\n    //               }, 5000);\n                \n    //             // utils.loadOpenCv(openCvReady);\n\n                \n    //         }\n    //     }\n    // }, [loaded, videoLoaded])\n\n    // const add_button = document.getElementById(\"add\");\n    // const zoom_window_text = document.getElementById(\"zoom_window_text\");\n    // const process_window_text = document.getElementById(\"process_window_text\");\n    // const video = document.getElementById(\"cam_input\");\n    // const output = document.getElementById(\"canvas_output\");\n    \n    \n    \n\n    // const [count, setCount] = useState(0);\n\n    // const catchZoomWindow = () => {\n    //     navigator.mediaDevices.getDisplayMedia({ video: true, audio: false })\n    //     .then(function(stream) {\n    //         // let video = document.getElementById(\"cam_input\");\n    //         // console.log(video);\n    //         // console.log(stream);\n    //         video.srcObject = stream;\n    //         console.log(stream);\n    //         let settings = stream.getVideoTracks()[0].getSettings();\n    //         console.log(settings);\n    //         add_button.style.display = \"none\";\n    //         zoom_window_text.style.display = \"none\";\n    //         process_window_text.style.display = \"none\";\n    //         // FPS = settings.frameRate;\n    //         output.style.width = video.style.width;\n    //         output.style.height = video.style.height;\n    //         video.play();\n    //     })\n    //     .then(()=>{\n    //         console.log('component catch', cv);\n    //         // console.log(OpenCvProvider.onLoaded);\n\n    //     })\n    //     .then(()=> {\n    //         // openCvReady();\n    //         // utils.loadOpenCv(openCvReady);\n    //         setVideoLoaded(true);\n            \n    //     })\n    //     .catch((err) =>{\n    //         console.log(\"An error occurred! \" + err);\n    //     });\n\n    // }\n\n    // function openCvReady(classifier) {\n    //     // const { loaded, cv } = useOpenCv();\n        \n    //     console.log('opencvReady', cv.Mat, loaded);\n    \n    //     let FPS = 0.25;\n    //     // let video = document.getElementById(\"cam_input\");\n    //     let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n    //     let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n    //     let gray = new cv.Mat();\n    //     let cap = new cv.VideoCapture(video);\n    //     let faces = new cv.RectVector();\n    //     // let classifier = new cv.CascadeClassifier();\n    //     let minsize = new cv.Size(0, 0);\n    //     let maxsize = new cv.Size(1000, 1000);\n    //     // let faceCascadeFile = \"haarcascade_frontalface_default.xml\";\n        \n    //     console.log('here');\n\n        \n\n    //     // utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n    //     //     console.log('here2');\n    //     //     classifier.load(faceCascadeFile) // in the callback, load the cascade from file\n    //     //     .then(()=>{\n    //     //         console.log('AAA'); \n    //     //         processVideo();\n    //     //     })\n    //     //     .catch((err)=>{console.log('load classifier:', err)});\n            \n    //     // });\n\n    \n    //     let clip_width = video.width/5;\n    //     let clip_height = video.height/5;\n        \n    \n    //     // let face_row = -1;\n    //     // let face_col = -1;\n    \n    //     // while(true){\n    //     //     let begin = Date.now();\n            \n    //     //     cap.read(src);\n    //     //     src.copyTo(dst);\n    //     //     cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\n    //     //     console.log('process classifier:', classifier);\n    //     //     // console.log(classifier.load);\n    //     //     // console.log(gray);\n    //     //     // console.log(faces);\n            \n\n    //     //     try{\n    //     //         classifier.detectMultiScale(gray, faces, 1.1, 3);\n\n    //     //     }catch(err){\n    //     //         console.log(err);\n    //     //     }\n    \n    //     // }\n        \n    //     function processVideo() {\n    //         let begin = Date.now();\n    //         if (video.srcObject!=null){\n    //             cap.read(src);\n    //             src.copyTo(dst);\n    //             cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\n    //             console.log('process classifier:', classifier);\n    //             // console.log(classifier.load);\n    //             // console.log(gray);\n    //             // console.log(faces);\n                \n    \n    //             try{\n    //                 classifier.detectMultiScale(gray, faces, 1.1, 3);\n\n    //             }catch(err){\n    //                 console.log(err);\n    //             }\n    //             // for (let i = 0; i < faces.size(); ++i) {\n    //             //     let face = faces.get(i);\n    //             //     // console.log(face);\n    //             //     let face_row = parseInt(face.y/clip_height);\n    //             //     let face_col = parseInt(face.x/clip_width);\n    \n    //             //     let tmp_row = parseInt((face.y+face.height-5) / clip_height);\n    //             //     let tmp_col = parseInt((face.x+face.width-5) / clip_width);\n    //             //     // console.log([face_row, face_col, tmp_row, tmp_col]);\n    //             //     if (face.width>=clip_width || face.height>=clip_height || tmp_row!=face_row || tmp_col!=face_col)\n    //             //         continue;\n    \n    //             //     let point1 = new cv.Point(face.x, face.y);\n    //             //     let point2 = new cv.Point(face.x + face.width, face.y + face.height);\n    //             //     cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);\n    //             // }\n    //             cv.imshow(\"canvas_output\", dst);\n    //         }\n    //         // schedule next one.\n    //         let delay = 1000/FPS - (Date.now() - begin);\n    //         setTimeout(processVideo, delay);\n    //     }\n    //     // schedule first one.\n    //     setTimeout(processVideo, 0);\n        \n    // }\n\n\n    // const cv = useOpenCv()\n    // console.log(cv)\n\n    // const video = document.getElementById(\"video\");\n    // let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n    // let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n    // let gray = new cv.Mat();\n    // let cap = new cv.VideoCapture(video);\n    // let faces = new cv.RectVector();\n    // let classifier = new cv.CascadeClassifier();\n\n    // let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml\n    // classifier.load(faceCascadeFile);\n    // console.log(classifier);\n\n    // function onOpenUtilsReady() {\n    //     let utils = new Utils('errorMessage');\n    //     utils.loadOpenCv(() => {\n    //     let faceCascadeFile = 'haarcascade_frontalface_default.xml';\n    //         utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {\n    //             document.getElementById('status').innerHTML = 'OpenCV.js is ready.';\n    //         });\n    //     });\n    // }\n\n    return (\n        <>\n        <div className=\"container\" onLoad={checkBrowser}>\n            <h2 id=\"title\">iExam</h2>\n            <h6 id=\"tip\">Please click add button to import the Zoom stream. Then you can scroll down to the iExam window.</h6>\n            <p id=\"zoom_window_text\">Zoom window</p>\n            <video id=\"cam_input\" width=\"1200\" height=\"690\" autoPlay muted></video>\n            {/* <img id=\"add\" src=\"add.svg\" alt=\"upload video window\" width=\"128\" height=\"128\" /> */}\n            <svg xmlns=\"http://www.w3.org/2000/svg\" id=\"add\" width=\"120\" height=\"120\" viewBox=\"0 0 24 24\"><path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\"/></svg>\n            <p id=\"process_window_text\">iExam window</p>\n            <canvas id=\"canvas_output\" width=\"1200\" height=\"690\">This box is for capturing student face</canvas>\n        </div>\n        <div className=\"footer\">\n            <p>Details for iExam please refer to slides: <a href=\"https://daoyuan14.github.io/slides/Expo21_iExam.pdf\" target=\"_blank\">https://daoyuan14.github.io/slides/Expo21_iExam.pdf</a></p>\n            <p>Post-exam recording analysis for desktop version, please view: <a href=\"https://github.com/VPRLab/iExam/tree/test\" target=\"_blank\">https://github.com/VPRLab/iExam/tree/test </a></p>\n            {/* <p id=\"author\">Author: YANG Xu, Supervisor: WU Daoyuan (VPRLab)</p>\n            <p>Last Modified: Mon Oct 25 2021 23:12:29 GMT+0800 (Hong Kong Standard Time)</p> */}\n        </div>\n        <script src=\"./src/iexam.js\"></script>\n        </>\n        \n    )\n}\n\n// function Utils() {\n//     let self = this;\n//     this.createFileFromUrl = function(path, url, callback) {\n//         console.log(cv);\n//         let request = new XMLHttpRequest();\n//         request.open('GET', url, true);\n//         request.responseType = 'arraybuffer';\n//         request.onload = function(ev) {\n//             if (request.readyState === 4) {\n//                 if (request.status === 200) {\n//                     let data = new Uint8Array(request.response);\n//                     cv.FS_createDataFile('/', path, data, true, false, false);\n//                     callback();\n//                 } else {\n//                     self.printError('Failed to load ' + url + ' status: ' + request.status);\n//                 }\n//             }\n//         };\n//         request.send();\n        \n//     };\n\n//     const OPENCV_URL = './opencv/opencv.js';\n//     this.loadOpenCv = function(onloadCallback) {\n//         let script = document.createElement('script');\n//         script.setAttribute('async', '');\n//         script.setAttribute('type', 'text/javascript');\n//         script.addEventListener('load', async () => {\n//             if (cv.getBuildInformation)\n//             {\n//                 console.log(cv.getBuildInformation());\n//                 onloadCallback();\n//             }\n//             else\n//             {\n//                 // WASM\n//                 if (cv instanceof Promise) {\n//                     cv = await cv;\n//                     console.log(cv.getBuildInformation());\n//                     onloadCallback();\n//                 } else {\n//                     cv['onRuntimeInitialized']=()=>{  //satisfy this condition\n//                         console.log(cv.getBuildInformation()); \n//                         onloadCallback();\n//                     }\n//                 }\n//             }\n//         });\n//         script.addEventListener('error', () => {\n//             self.printError('Failed to load ' + OPENCV_URL);\n//         });\n//         script.src = OPENCV_URL;\n//         let node = document.getElementsByTagName('script')[0];\n//         node.parentNode.insertBefore(script, node);\n//     };\n// }\n\n\n\nexport default MyComponent;\n\n\n"]},"metadata":{},"sourceType":"module"}